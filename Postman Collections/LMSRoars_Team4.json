{
	"info": {
		"_postman_id": "307d98ce-6084-484d-bb19-6a4bb22f9434",
		"name": "Team4_LMS Roars",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "USER_LOGIN",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cacad74a-4195-48a6-a77d-067ff33f647a",
						"exec": [
							"// Check the response status code from json file\r",
							"\r",
							"    pm.test(\"Status Code Validation\", function () {\r",
							"    const expStatusCode = pm.variables.get('expectedStatusCode');\r",
							"    pm.response.to.have.status(expStatusCode);\r",
							"});\r",
							"if (pm.response.code === 200) {\r",
							"const result = pm.response.json();\r",
							"//1.code validation\r",
							"pm.test(\"Status code is 200 or 201\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"    console.log(\"Token:\", result.token);\r",
							"    console.log(\"Status:\", pm.response.status);\r",
							"    pm.collectionVariables.set(\"token\", result.token);\r",
							"    console.log(\"bearer token set as collection variable: \" + result.token);\r",
							"\r",
							"    // UserId\r",
							"    pm.collectionVariables.set(\"userId\",result.userId);\r",
							"    console.log(\"UserId\", result.userId);\r",
							"\r",
							"//2.Token Authentication and data Validation\r",
							"pm.test(\"Token is present and type is bearer \", () => {\r",
							"    pm.expect(result).to.have.property(\"token\");\r",
							"    pm.expect(result.token).to.be.a(\"string\");\r",
							"    pm.expect(result.type).to.eql(\"Bearer\");\r",
							"});\r",
							"//3.content type validation\r",
							"pm.test(\"Content-Type is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"//4.field validation\r",
							"pm.test(\"Response has all required fields\", () => {\r",
							"    pm.expect(result).to.have.property(\"token\");\r",
							"    pm.expect(result).to.have.property(\"type\");\r",
							"    pm.expect(result).to.have.property(\"userId\");\r",
							"    pm.expect(result).to.have.property(\"email\");\r",
							"    pm.expect(result).to.have.property(\"roles\");\r",
							"    pm.expect(result).to.have.property(\"status\");\r",
							"    pm.expect(result).to.have.property(\"passwordExpired\");\r",
							"    pm.expect(result.token).to.be.a(\"string\");\r",
							"    pm.expect(result.status).to.be.a(\"string\");\r",
							"});\r",
							"//5.Schema validation\r",
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"token\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"type\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"userId\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"email\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"roles\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    },\r",
							"    \"status\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"passwordExpired\": {\r",
							"      \"type\": \"boolean\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"token\",\r",
							"    \"type\",\r",
							"    \"userId\",\r",
							"    \"email\",\r",
							"    \"roles\",\r",
							"    \"status\",\r",
							"    \"passwordExpired\"\r",
							"  ]\r",
							"};\r",
							"pm.test(\"Response schema is valid\", () => {\r",
							"    //pm.expect(ajv.validate(result, schema)).to.be.true;\r",
							"     pm.expect(tv4.validate(result, schema)).to.be.true;\r",
							"   \r",
							"})\r",
							"} else {\r",
							"    console.error(\"negative case cannot retriev access token\");\r",
							"};"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "555ff651-a620-43d0-934b-519cf9e1bf35",
						"exec": [
							"var method=pm.variables.get('method');\r",
							"pm.variables.set('METHOD',method);\r",
							"\r",
							"console.log(\"Base URL:\", pm.variables.get(\"baseURL\"));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "45a07890-55d6-446f-918d-38b542f84677",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "{{METHOD}}",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userLoginEmailId\": \"{{username}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}{{userLoginEndpoint}}"
			},
			"response": []
		},
		{
			"name": "GET_USERROLE_USRID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f255a861-96da-426c-a28b-fad09716f13c",
						"exec": [
							"var PgmSchema=\r",
							"{\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"userId\": {\r",
							"        \"type\": [\"string\",\"null\"]\r",
							"      },\r",
							"      \"roleId\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"programId\": {\r",
							"        \"type\": \"number\"\r",
							"      },\r",
							"      \"batchId\": {\r",
							"        \"type\": \"number\"\r",
							"      },\r",
							"      \"userRoleProgramBatchStatus\": {\r",
							"        \"type\": \"string\"\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"userId\",\r",
							"      \"roleId\",\r",
							"      \"programId\",\r",
							"      \"batchId\",\r",
							"      \"userRoleProgramBatchStatus\"\r",
							"    ]\r",
							"  }\r",
							"}\r",
							" //1.Response  code validation\r",
							"  pm.test(\"Status Code Validation\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(pm.variables.get('statuscode'));\r",
							"});\r",
							"\r",
							"if(pm.response.code === 200){\r",
							"  pm.test(\"Schema Validation\",function () {\r",
							"    pm.response.to.have.jsonSchema(PgmSchema);\r",
							"  });\r",
							"\r",
							"  pm.test(\"Response has all required fields\", () => {\r",
							"    pm.expect(result).to.have.property(\"programId\");\r",
							"    pm.expect(result).to.have.property(\"batchId\");\r",
							"    pm.expect(result).to.have.property(\"userId\");\r",
							"    pm.expect(result).to.have.property(\"roleId\");\r",
							"    pm.expect(result).to.have.property(\"userRoleProgramBatchStatus\")\r",
							"  });\r",
							"   //3.content type validation\r",
							" pm.test(\"Content-Type is application/json\", () => {\r",
							"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"  });\r",
							"pm.test(\"Data Type Validation\", function () {\r",
							"            const result = pm.response.json(); \r",
							"            pm.expect(result).to.be.an('array'); \r",
							"            pm.expect(result.length).to.be.greaterThan(0); \r",
							"            \r",
							"            result.forEach(batch => {\r",
							"                \r",
							"                pm.expect(batch).to.have.property('userId');\r",
							"                pm.expect(batch.userId).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"               \r",
							"                pm.expect(batch).to.have.property('programId');\r",
							"                pm.expect(batch.programId).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"                \r",
							"                pm.expect(batch).to.have.property('roleId');\r",
							"                pm.expect(batch.roleId).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"                \r",
							"                pm.expect(batch).to.have.property('batchId');\r",
							"                pm.expect(batch.batchId).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"                \r",
							"                pm.expect(batch).to.have.property('userRoleProgramBatchStatus');\r",
							"                pm.expect(batch.userRoleProgramBatchStatus).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"            });\r",
							"            });\r",
							"  }\r",
							"  \r",
							"\t\r",
							"\r",
							"  "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "0906edcc-4fc3-4b0b-8f84-65c0f6934cb4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"followAuthorizationHeader": false
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"url": "{{baseURL}}{{endpoint}}{{userId}}"
			},
			"response": []
		},
		{
			"name": "GET_ALL_PGM",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bdfcd6c3-c317-40e0-962b-723d1f845c81",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "737b409c-9917-459b-9c41-4933c79b7d62",
						"exec": [
							"var GetAllPgm=\r",
							"{\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"programId\": {\r",
							"        \"type\": \"number\"\r",
							"      },\r",
							"      \"programName\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"programDescription\": {\r",
							"        \"type\": [\"string\", \"null\"]\r",
							"      },\r",
							"      \"programStatus\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"creationTime\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"lastModTime\": {\r",
							"        \"type\": \"string\"\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"programId\",\r",
							"      \"programName\",\r",
							"      \"programStatus\",\r",
							"      \"creationTime\",\r",
							"      \"lastModTime\"\r",
							"    ]\r",
							"  }\r",
							"}\r",
							"//1.Response  code validation\r",
							"\r",
							"\r",
							"pm.test(\"Status Code Validation\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(pm.variables.get('statuscode'));\r",
							"});\r",
							"\r",
							"if(pm.response.code === 200){\r",
							"  pm.test(\"Get All Program Schema Validation\",function () {\r",
							"    pm.response.to.have.jsonSchema(GetAllPgm);\r",
							"  });\r",
							"\r",
							"\r",
							"  //3.content type validation\r",
							"  pm.test(\"Content-Type is application/json\", () => {\r",
							"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"  });\r",
							"  \r",
							"    pm.test(\"Data Type Validation\", function () {\r",
							"    const result = pm.response.json();  // Parse the JSON response\r",
							"\r",
							"    // Validate that the response is an array\r",
							"    pm.expect(result).to.be.an('array');\r",
							"    \r",
							"    // Check if the array is not empty\r",
							"    pm.expect(result.length).to.be.greaterThan(0);\r",
							"\r",
							"    // Iterate over each batch in the response array\r",
							"    result.forEach(class_ => {\r",
							"        // Validate programId: should be a number or null\r",
							"        pm.expect(class_).to.have.property('programId');\r",
							"        pm.expect(class_.programId).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"        // Validate programName: should be a number or null\r",
							"        pm.expect(class_).to.have.property('programName');\r",
							"        pm.expect(class_.programName).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"\r",
							"        // Validate programDescription: should be a string or null\r",
							"        pm.expect(class_).to.have.property('programDescription');\r",
							"        pm.expect(class_.programDescription).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"        // Validate programStatus: should be a string or null\r",
							"        pm.expect(class_).to.have.property('programStatus');\r",
							"        pm.expect(class_.programStatus).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"           // Validate that 'creationTime'  using RegEx\r",
							"           pm.expect(class_).to.have.property('creationTime');\r",
							"    pm.expect(class_.creationTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?([+-]\\d{2}:\\d{2}|Z)$/);\r",
							"\r",
							"    // Validate that 'lastModTime'  format using RegEx\r",
							"    pm.expect(class_).to.have.property('lastModTime');\r",
							"    pm.expect(class_.lastModTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?([+-]\\d{2}:\\d{2}|Z)$/);\r",
							"    });\r",
							"})\r",
							"}\r",
							"else if(pm.response.code != 200 ){\r",
							"    var responseMessage = pm.response.text(); \r",
							"    console.log(responseMessage);               \r",
							"\r",
							"        var possibleMessages = [          \r",
							"            'Not Found',\r",
							"            'Method Not Allowed',\r",
							"            'false',\r",
							"            'Invalid endpoint'\r",
							"        ];\r",
							"     var messageFound = possibleMessages.some(msg => responseMessage.includes(msg));   \r",
							"     pm.test(\"Error Message Validation\", function () {    \r",
							"       pm.expect(messageFound).to.be.true;});\r",
							"   };\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "671e3400-858e-4ffe-a0e9-4a45a5d5ad52",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"url": "{{baseURL}}{{endpoint}}"
			},
			"response": []
		},
		{
			"name": "GET_ALLPGM_USERS",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bdfcd6c3-c317-40e0-962b-723d1f845c81",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "737b409c-9917-459b-9c41-4933c79b7d62",
						"exec": [
							"var PgmSchema=\r",
							"{\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"programId\": {\r",
							"        \"type\": \"number\"\r",
							"      },\r",
							"      \"programName\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"programDescription\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"programStatus\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"programUsers\": {\r",
							"        \"type\": \"array\",\r",
							"        \"items\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"userId\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"userFirstName\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"userLastName\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"userPhoneNumber\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"userLocation\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"userTimeZone\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"userLinkedinUrl\": {\r",
							"              \"type\": [\"string\", \"null\"]\r",
							"            },\r",
							"            \"userEduUg\": {\r",
							"              \"type\": [\"string\", \"null\"]\r",
							"            },\r",
							"            \"userEduPg\": {\r",
							"              \"type\": [\"string\", \"null\"]\r",
							"            },\r",
							"            \"userComments\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"userVisaStatus\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"userLoginEmail\": {\r",
							"              \"type\": [\"string\", \"null\"]\r",
							"            },\r",
							"            \"userMiddleName\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"userId\",\r",
							"            \"userFirstName\",\r",
							"            \"userLastName\",\r",
							"            \"userPhoneNumber\",\r",
							"            \"userLocation\",\r",
							"            \"userTimeZone\",\r",
							"            \"userLinkedinUrl\",\r",
							"            \"userEduUg\",\r",
							"            \"userEduPg\",\r",
							"            \"userVisaStatus\",\r",
							"            \"userLoginEmail\"\r",
							"           \r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"creationTime\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"lastModTime\": {\r",
							"        \"type\": \"string\"\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"programId\",\r",
							"      \"programName\",\r",
							"      \"programDescription\",\r",
							"      \"programStatus\",\r",
							"      \"programUsers\",\r",
							"      \"creationTime\",\r",
							"      \"lastModTime\"\r",
							"    ]\r",
							"  }\r",
							"}\r",
							"\r",
							"//1.Response  code validation\r",
							"\r",
							"pm.test(\"Status Code Validation\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(pm.variables.get('statuscode'));\r",
							"});\r",
							"\r",
							"if(pm.response.code === 200){\r",
							"  pm.test(\" Schema Validation\",function () {\r",
							"    pm.response.to.have.jsonSchema(PgmSchema);\r",
							"  });\r",
							"\r",
							"//content type validation\r",
							"  pm.test(\"Content-Type is application/json\", () => {\r",
							"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"  });  \r",
							"  \r",
							"    pm.test(\"Data Type Validation\", function () {\r",
							"    const result = pm.response.json();  // Parse the JSON response\r",
							"\r",
							"    // Validate that the response is an array\r",
							"    pm.expect(result).to.be.an('array');\r",
							"    \r",
							"    // Check if the array is not empty\r",
							"    pm.expect(result.length).to.be.greaterThan(0);\r",
							"\r",
							"    // Iterate over each batch in the response array\r",
							"    result.forEach(class_ => {\r",
							"        // Validate programId: should be a number or null\r",
							"        pm.expect(class_).to.have.property('programId');\r",
							"        pm.expect(class_.programId).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"        // Validate programName: should be a string or null\r",
							"        pm.expect(class_).to.have.property('programName');\r",
							"        pm.expect(class_.programName).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"\r",
							"        // Validate programDescription: should be a string or null\r",
							"        pm.expect(class_).to.have.property('programDescription');\r",
							"        pm.expect(class_.programDescription).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"        // Validate programStatus: should be a string or null\r",
							"        pm.expect(class_).to.have.property('programStatus');\r",
							"        pm.expect(class_.programStatus).to.satisfy(val => typeof val === 'programStatus' || val === 'Inactive'|| val=='Active');\r",
							"    // Validate that 'creationTime'  format using RegEx\r",
							"           pm.expect(class_).to.have.property('creationTime');\r",
							"    pm.expect(class_.creationTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?([+-]\\d{2}:\\d{2}|Z)$/);\r",
							"\r",
							"    // Validate that 'lastModTime'  format using RegEx\r",
							"    pm.expect(class_).to.have.property('lastModTime');\r",
							"    pm.expect(class_.lastModTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?([+-]\\d{2}:\\d{2}|Z)$/);\r",
							"\r",
							" \r",
							"    });\r",
							"})\r",
							"}\r",
							"else if(pm.response.code != 200 ){\r",
							"    var responseMessage = pm.response.text(); \r",
							"    console.log(responseMessage);               \r",
							"\r",
							"        var possibleMessages = [          \r",
							"            'Not Found',\r",
							"            'Method Not Allowed',\r",
							"            'false',\r",
							"            'Invalid endpoint'\r",
							"        ];\r",
							"     var messageFound = possibleMessages.some(msg => responseMessage.includes(msg));   \r",
							"     pm.test(\"Error Message Validation\", function () {    \r",
							"       pm.expect(messageFound).to.be.true;});\r",
							"   };\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "ffcb3e20-ff3a-4a58-a6c2-0d950b4adb2a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"url": "{{baseURL}}{{endpoint}}"
			},
			"response": []
		},
		{
			"name": "CREATE_PGM",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5fdfcca2-1b99-44a7-8ef4-5c0489e3e16f",
						"exec": [
							"\r",
							"if(pm.response.code === 201)\r",
							" {\r",
							"   var result = pm.response.json();\r",
							"   var programid=result.programId;\r",
							"   var programname = result.programName;\r",
							"   if (pm.collectionVariables.has(\"increment\")) \r",
							"   {\r",
							"    var incr = pm.collectionVariables.get(\"increment\");\r",
							"     var program = \"programId\"+incr;\r",
							"    var programnm =\"programName\"+incr;\r",
							"    pm.collectionVariables.unset(program);\r",
							"      pm.collectionVariables.unset(programnm);\r",
							"      pm.collectionVariables.set(program,programid );\r",
							"      pm.collectionVariables.set(programnm,programname);\r",
							"      incr++;\r",
							"      pm.collectionVariables.set(\"increment\", incr);\r",
							"      pm.test(\"Validate Program Name in response\", function () {   \r",
							"  var program_name = pm.collectionVariables.get(programnm);\r",
							"  var result = pm.response.json();\r",
							"  var pgmName=result.programName;\r",
							" pm.expect(program_name).to.eql(pgmName);\r",
							" });\r",
							"   }\r",
							"   else{\r",
							"   var incr=1;\r",
							"   pm.collectionVariables.set(\"increment\", incr);\r",
							"   var program = \"programId\"+incr;\r",
							"   var programnm =\"programName\"+incr;\r",
							"   pm.collectionVariables.unset(program);\r",
							"      pm.collectionVariables.unset(programnm);\r",
							"      pm.collectionVariables.set(program,programid );\r",
							"      pm.collectionVariables.set(programnm,programname);\r",
							"       pm.collectionVariables.set(\"deleteprogramId1\",programid );\r",
							"      pm.collectionVariables.set(\"deleteprogramName1\",programname);\r",
							"      incr++;\r",
							"      pm.collectionVariables.set(\"increment\", incr);\r",
							"      pm.test(\"Validate Program Name in response\", function () {   \r",
							"  var program_name = pm.collectionVariables.get(programnm);\r",
							"  var result = pm.response.json();\r",
							"  var pgmName=result.programName;\r",
							" pm.expect(program_name).to.eql(pgmName);\r",
							" });\r",
							"   };\r",
							" };\r",
							"\r",
							"\r",
							"\r",
							"var PostSchema=\r",
							"{\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"programId\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"programName\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"programDescription\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"programStatus\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"creationTime\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"lastModTime\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"programId\",\r",
							"    \"programName\",\r",
							"    \"programDescription\",\r",
							"    \"programStatus\",\r",
							"    \"creationTime\",\r",
							"    \"lastModTime\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Status Code Validation\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(pm.variables.get('statuscode'));\r",
							"});\r",
							"\r",
							"if(pm.response.code === 201){\r",
							"  pm.test(\"PostSchema Schema Validation\",function () {\r",
							"    pm.response.to.have.jsonSchema(PostSchema);\r",
							"  });\r",
							"\r",
							"pm.test(\"Response has all required fields\", () => {\r",
							"    pm.expect(result).to.have.property(\"programId\");\r",
							"    pm.expect(result).to.have.property(\"programDescription\");\r",
							"    pm.expect(result).to.have.property(\"programStatus\");\r",
							"    pm.expect(result).to.have.property(\"creationTime\");\r",
							"    pm.expect(result).to.have.property(\"lastModTime\")\r",
							"  });\r",
							"\r",
							" //3.content type validation\r",
							"  \r",
							"pm.test(\"Content-Type-Validation\",function () {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Data Type Validation\", function () {\r",
							"    var jsonData = pm.response.json();   \r",
							"    pm.expect(jsonData.programId).to.be.a('number');\r",
							"   \r",
							"    pm.expect(jsonData.programName).to.satisfy(function(value) {\r",
							"        return typeof value === 'string' || value === null;\r",
							"    });\r",
							"   \r",
							"    pm.expect(jsonData.programDescription).to.satisfy(function(value) {\r",
							"        return value === null || typeof value === 'string';\r",
							"    });\r",
							"    // Validate that 'programStatus' is a string\r",
							"    pm.expect(jsonData.programStatus).to.be.a('string');\r",
							"\r",
							"    // Validate that 'creationTime'  using RegEx\r",
							"    pm.expect(jsonData.creationTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?([+-]\\d{2}:\\d{2}|Z)$/);\r",
							"\r",
							"    // Validate that 'lastModTime'  format using RegEx\r",
							"    pm.expect(jsonData.lastModTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?([+-]\\d{2}:\\d{2}|Z)$/);\r",
							"        \r",
							"});\r",
							"}\r",
							"else if(pm.response.code != 200 ){\r",
							"    var responseMessage = pm.response.text(); \r",
							"    console.log(responseMessage);               \r",
							"\r",
							"        var possibleMessages = [          \r",
							"            'Not Found',\r",
							"            'Method Not Allowed',\r",
							"            'false',\r",
							"            'Invalid endpoint'\r",
							"        ];\r",
							"     var messageFound = possibleMessages.some(msg => responseMessage.includes(msg));   \r",
							"     pm.test(\"Error Message Validation\", function () {    \r",
							"       pm.expect(messageFound).to.be.true;});\r",
							"   };\r",
							"  \r",
							"\r",
							" "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b13359b5-08bd-4499-ab36-c21b019d56ae",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "8c64935a-66bf-43b2-b86f-dd26a97f894b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"programName\": \"{{programname}}\",\r\n  \"programDescription\": \"{{programdescription}}\",\r\n  \"programStatus\": \"{{programstatus}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}{{endpoint}}"
			},
			"response": []
		},
		{
			"name": "GET_PGM_PGMID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bdfcd6c3-c317-40e0-962b-723d1f845c81",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "737b409c-9917-459b-9c41-4933c79b7d62",
						"exec": [
							"pm.collectionVariables.unset(\"increment\");\r",
							"\r",
							"if(pm.response.code === 200)\r",
							" {\r",
							"    var result = pm.response.json();\r",
							"    pm.collectionVariables.set(\"programName1\",result.programName);\r",
							" \r",
							"pm.test(\"Validate ProgramID in response\", function () {   \r",
							"  var program_id = pm.collectionVariables.get(\"programId1\");\r",
							"  var result = pm.response.json();\r",
							"  var pgmId=result.programId;\r",
							" pm.expect(program_id).to.eql(pgmId);\r",
							" });\r",
							" };\r",
							"\r",
							"var PgmSchema=\r",
							" {\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"programId\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"programName\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"programDescription\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"programStatus\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"creationTime\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"lastModTime\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"programId\",\r",
							"    \"programName\",\r",
							"    \"programDescription\",\r",
							"    \"programStatus\",\r",
							"    \"creationTime\",\r",
							"    \"lastModTime\"\r",
							"  ]\r",
							"}\r",
							"\r",
							" //1.Response  code validation\r",
							"  pm.test(\"Status Code Validation\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(pm.variables.get('statuscode'));\r",
							"});\r",
							"\r",
							"if(pm.response.code === 200){\r",
							"  pm.test(\"Schema Validation\",function () {\r",
							"    pm.response.to.have.jsonSchema(PgmSchema);\r",
							"  })\r",
							"\r",
							" pm.test(\"Response has all required fields\", () => {\r",
							"    pm.expect(result).to.have.property(\"programId\");\r",
							"    pm.expect(result).to.have.property(\"programDescription\");\r",
							"    pm.expect(result).to.have.property(\"programStatus\");\r",
							"    pm.expect(result).to.have.property(\"creationTime\");\r",
							"    pm.expect(result).to.have.property(\"lastModTime\")\r",
							"  });\r",
							"\r",
							"   //3.content type validation\r",
							"  pm.test(\"Content-Type is application/json\", () => {\r",
							"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"  });\r",
							"pm.test(\"Data Type Validation\", function () {\r",
							"    var jsonData = pm.response.json();   \r",
							"    pm.expect(jsonData.programId).to.be.a('number');\r",
							"   \r",
							"    pm.expect(jsonData.programName).to.satisfy(function(value) {\r",
							"        return typeof value === 'string' || value === null;\r",
							"    });\r",
							"   \r",
							"    pm.expect(jsonData.programDescription).to.satisfy(function(value) {\r",
							"        return value === null || typeof value === 'string';\r",
							"    });\r",
							"    // Validate that 'programStatus' is a string\r",
							"    pm.expect(jsonData.programStatus).to.be.a('string');\r",
							"\r",
							"    // Validate that 'creationTime'  using RegEx\r",
							"    pm.expect(jsonData.creationTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?([+-]\\d{2}:\\d{2}|Z)$/);\r",
							"\r",
							"    // Validate that 'lastModTime'  format using RegEx\r",
							"    pm.expect(jsonData.lastModTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?([+-]\\d{2}:\\d{2}|Z)$/);\r",
							"        \r",
							"});\r",
							"   }\r",
							"   else if(pm.response.code != 200 ){\r",
							"    var responseMessage = pm.response.text(); \r",
							"    console.log(responseMessage);               \r",
							"\r",
							"        var possibleMessages = [          \r",
							"            'Not Found',\r",
							"            'Method Not Allowed',\r",
							"            'false',\r",
							"            'Invalid endpoint'\r",
							"        ];\r",
							"     var messageFound = possibleMessages.some(msg => responseMessage.includes(msg));   \r",
							"     pm.test(\"Error Message Validation\", function () {    \r",
							"       pm.expect(messageFound).to.be.true;});\r",
							"   };\r",
							"\t\r",
							"\r",
							"  "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "4e58b27b-31f7-4772-bd82-cce2589570dc",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"url": "{{baseURL}}{{endpoint}}{{programId1}}"
			},
			"response": []
		},
		{
			"name": "UPD_PGM_PGMNAME",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "671552da-5086-49eb-b816-58298b0fa278",
						"exec": [
							"if(pm.response.code === 200)\r",
							" {\r",
							"    var result = pm.response.json();\r",
							"pm.collectionVariables.set(\"programName1\",result.programName);\r",
							" \r",
							"pm.test(\"Validate Program Name in response\", function () {   \r",
							"  var program_name = pm.collectionVariables.get(\"programName1\");\r",
							"  var result = pm.response.json();\r",
							" var pgmName=result.programName;\r",
							" pm.expect(program_name).to.eql(pgmName);\r",
							" });\r",
							" };\r",
							"\r",
							"var PutSchema=\r",
							"{\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"programId\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"programName\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"programDescription\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"programStatus\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"creationTime\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"lastModTime\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"programId\",\r",
							"    \"programName\",\r",
							"    \"programDescription\",\r",
							"    \"programStatus\",\r",
							"    \"creationTime\",\r",
							"    \"lastModTime\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Status Code Validation\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(pm.variables.get('statuscode'));\r",
							"});\r",
							"\r",
							"if(pm.response.code === 200){\r",
							"    pm.test(\"PutSchema Validation\",function ()\r",
							"    {\r",
							"        pm.response.to.have.jsonSchema(PutSchema);\r",
							"    });\r",
							"pm.test(\"Response has all required fields\", () => {\r",
							"    pm.expect(result).to.have.property(\"programId\");\r",
							"    pm.expect(result).to.have.property(\"programDescription\");\r",
							"    pm.expect(result).to.have.property(\"programStatus\");\r",
							"    pm.expect(result).to.have.property(\"creationTime\");\r",
							"    pm.expect(result).to.have.property(\"lastModTime\")\r",
							"  });\r",
							"    pm.test(\"Content-Type-Validation\",function () {\r",
							"        pm.response.to.have.header('Content-Type', 'application/json');\r",
							"    });\r",
							"pm.test(\"Data Type Validation\", function () {\r",
							"    var jsonData = pm.response.json();   \r",
							"    pm.expect(jsonData.programId).to.be.a('number');\r",
							"   \r",
							"    pm.expect(jsonData.programName).to.satisfy(function(value) {\r",
							"        return typeof value === 'string' || value === null;\r",
							"    });\r",
							"   \r",
							"    pm.expect(jsonData.programDescription).to.satisfy(function(value) {\r",
							"        return value === null || typeof value === 'string';\r",
							"    });\r",
							"    // Validate that 'programStatus' is a string\r",
							"    pm.expect(jsonData.programStatus).to.be.a('string');\r",
							"\r",
							"    // Validate that 'creationTime'  using RegEx\r",
							"    pm.expect(jsonData.creationTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?([+-]\\d{2}:\\d{2}|Z)$/);\r",
							"\r",
							"    // Validate that 'lastModTime'  format using RegEx\r",
							"    pm.expect(jsonData.lastModTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?([+-]\\d{2}:\\d{2}|Z)$/);\r",
							"        \r",
							"});\r",
							"\r",
							"\r",
							"}\r",
							"else if(pm.response.code != 200 ){\r",
							"    var responseMessage = pm.response.text(); \r",
							"    console.log(responseMessage);               \r",
							"\r",
							"        var possibleMessages = [          \r",
							"            'Not Found',\r",
							"            'Method Not Allowed',\r",
							"            'false',\r",
							"            'Invalid endpoint'\r",
							"        ];\r",
							"     var messageFound = possibleMessages.some(msg => responseMessage.includes(msg));   \r",
							"     pm.test(\"Error Message Validation\", function () {    \r",
							"       pm.expect(messageFound).to.be.true;});\r",
							"   };\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9328a02a-3e82-4c72-a1af-0e1fbc081d6c",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "4a2b1a8c-fae5-48ea-b87a-86bdaf9f8a1d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"programName\": \"{{programname}}\",\r\n  \"programDescription\": \"{{programdescription}}\",\r\n  \"programStatus\": \"{{programstatus}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}{{endpoint}}{{programName1}}"
			},
			"response": []
		},
		{
			"name": "UPDATE_PRG_BY_ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a55e81aa-1e57-46a8-8ee7-32358edeb589",
						"exec": [
							"\r",
							"\r",
							"var programDescription = pm.variables.get(\"programDescription\");\r",
							"var program_ID = pm.collectionVariables.get(\"programId2\");\r",
							"var program_name = pm.collectionVariables.get(\"programName2\");\r",
							"var program=pm.variables.get(\"programName2\");\r",
							"var programStatus=pm.variables.get('programStatus');\r",
							"\r",
							"// Create the base body object\r",
							"var bodyJson = {        \r",
							"    \r",
							"};\r",
							"//  program_description if programDescription is provided in json\r",
							"if (programDescription && programDescription !== \"\") {\r",
							"    bodyJson.programDescription = programDescription;\r",
							"}\r",
							"// add programStatus if program status is provided in json\r",
							"if ( programStatus && programStatus.trim() !== \"\" && programStatus !==\"Without Mandatory Field--Status\") {\r",
							"    bodyJson.programStatus = programStatus;\r",
							"}\r",
							"\r",
							"//  add program_description if programDescription is provided in json\r",
							"if (program && program.trim() !== \"\" && program !==\"Without Mandatory Field-Name\") {\r",
							"    console.log('Adding Program Name');\r",
							"    bodyJson.programName = program_name;\r",
							"} else {    \r",
							"    bodyJson.programName=program_name;\r",
							"}\r",
							"\r",
							"\r",
							"// Set the updated body to the request\r",
							"pm.request.body.raw = JSON.stringify(bodyJson);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0f5bac89-d572-44c3-8ddd-2c970fd4f17f",
						"exec": [
							"var updateByPROGID={\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"programId\": {\r",
							"      \"type\": [\"number\", \"null\"]\r",
							"    },\r",
							"    \"programName\": {\r",
							"      \"type\": [\"string\", \"null\"]\r",
							"    },\r",
							"    \"programDescription\": {\r",
							"      \"type\": [\"string\", \"null\"]\r",
							"    },\r",
							"    \"programStatus\": {\r",
							"      \"type\": \"string\",\r",
							"      \"enum\": [\"Active\", \"Inactive\"]  \r",
							"    },\r",
							"    \"creationTime\": {\r",
							"      \"type\": \"string\",\r",
							"      \"format\": \"date-time\"\r",
							"    },\r",
							"    \"lastModTime\": {\r",
							"      \"type\": \"string\",\r",
							"      \"format\": \"date-time\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\"programId\", \"programName\", \"programStatus\", \"creationTime\", \"lastModTime\"],\r",
							"  \r",
							"}\r",
							"   pm.test(\"Response Messgae Validation\", function () {\r",
							"if(pm.response.code === 200){\r",
							"\r",
							"pm.test(\"GetAllBatches Schema Validation\",function ()\r",
							"{\r",
							" pm.response.to.have.jsonSchema(updateByPROGID);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type-Validation\",function () {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Data Type Validation\", function () {\r",
							"    var jsonData = pm.response.json();   \r",
							"    pm.expect(jsonData.programId).to.be.a('number');\r",
							"   \r",
							"    pm.expect(jsonData.programName).to.satisfy(function(value) {\r",
							"        return typeof value === 'string' || value === null;\r",
							"    });\r",
							"   \r",
							"    pm.expect(jsonData.programDescription).to.satisfy(function(value) {\r",
							"        return value === null || typeof value === 'string';\r",
							"    });\r",
							"    // Validate that 'programStatus' is a string\r",
							"    pm.expect(jsonData.programStatus).to.be.a('string');\r",
							"\r",
							"    // Validate that 'creationTime'  using RegEx\r",
							"    pm.expect(jsonData.creationTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?([+-]\\d{2}:\\d{2}|Z)$/);\r",
							"\r",
							"    // Validate that 'lastModTime'  format using RegEx\r",
							"    pm.expect(jsonData.lastModTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?([+-]\\d{2}:\\d{2}|Z)$/);\r",
							"        \r",
							"});\r",
							"}\r",
							"   else if(pm.response.code != 200){\r",
							"    var responseMessage = pm.response.text(); \r",
							"    console.log(responseMessage);               \r",
							"\r",
							"        var possibleMessages = [          \r",
							"            'Application Error',\r",
							"            'false',\r",
							"            'Invalid endpoint'\r",
							"        ];\r",
							"     var messageFound = possibleMessages.some(msg => responseMessage.includes(msg));       \r",
							"       pm.expect(messageFound).to.be.true;\r",
							"   }\r",
							"   });\r",
							"\r",
							"pm.test(\"StatusCodeValidation\", function () {\r",
							" const expStatusCode = pm.variables.get('expectedStatusCode');\r",
							"    pm.response.to.have.status(expStatusCode);    \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "04bcf806-f8cf-4e13-a384-bb252a0df0a5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}{{UPDATE_PROGRAM_BY_ID}}{{programId2}}"
			},
			"response": []
		},
		{
			"name": "GET_ALL_BATCHES",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "281601e2-4216-4233-8332-e6a3f623addf",
						"exec": [
							"var GetAllbathchesSchema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"batchId\": {\r",
							"        \"type\":  [\"number\", \"null\"]\r",
							"      },\r",
							"      \"batchName\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      },\r",
							"      \"batchDescription\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      },\r",
							"      \"batchStatus\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      },\r",
							"      \"batchNoOfClasses\": {\r",
							"        \"type\": [\"number\", \"null\"]\r",
							"\r",
							"      },\r",
							"      \"programId\": {\r",
							"        \"type\": [\"number\", \"null\"]\r",
							"\r",
							"      },\r",
							"      \"programName\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"batchId\",\r",
							"      \"batchName\",\r",
							"      \"batchStatus\",\r",
							"      \"batchNoOfClasses\",\r",
							"      \"programId\",\r",
							"      \"programName\"\r",
							"    ]\r",
							"  }\r",
							"}\r",
							"\r",
							"if(pm.response.code === 200){\r",
							"pm.test(\"GetAllBatches Schema Validation\",function ()\r",
							"{\r",
							" pm.response.to.have.jsonSchema(GetAllbathchesSchema);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type-Validation\",function () {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json');\r",
							"});\r",
							"\r",
							"    pm.test(\"Data Type Validation -- GET ALL BATCHES\", function () {\r",
							"    const result = pm.response.json();  // Parse the JSON response\r",
							"\r",
							"    // Validate that the response is an array\r",
							"    pm.expect(result).to.be.an('array');\r",
							"    \r",
							"    // Check if the array is not empty\r",
							"    pm.expect(result.length).to.be.greaterThan(0);\r",
							"\r",
							"    // Iterate over each batch in the response array\r",
							"    result.forEach(batch => {\r",
							"        // Validate batchId: should be a number or null\r",
							"        pm.expect(batch).to.have.property('batchId');\r",
							"        pm.expect(batch.batchId).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"        // Validate batchName: should be a string or null\r",
							"        pm.expect(batch).to.have.property('batchName');\r",
							"        pm.expect(batch.batchName).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"        // Validate batchDescription: should be a string or null\r",
							"        pm.expect(batch).to.have.property('batchDescription');\r",
							"        pm.expect(batch.batchDescription).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"        // Validate batchStatus: should be a string or null\r",
							"        pm.expect(batch).to.have.property('batchStatus');\r",
							"        pm.expect(batch.batchStatus).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"        // Validate batchNoOfClasses: should be a string, number, or null\r",
							"        pm.expect(batch).to.have.property('batchNoOfClasses');\r",
							"        pm.expect(batch.batchNoOfClasses).to.satisfy(val => typeof val === 'string' || typeof val === 'number' || val === null);\r",
							"\r",
							"        // Validate programId: should be a number or null\r",
							"        pm.expect(batch).to.have.property('programId');\r",
							"        pm.expect(batch.programId).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"        // Validate programName: should be a string or null\r",
							"        pm.expect(batch).to.have.property('programName');\r",
							"        pm.expect(batch.programName).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"    });\r",
							"});\r",
							"\r",
							"}\r",
							"\r",
							"pm.test(\"StatusCodeValidation\", function () {\r",
							" const expStatusCode = pm.variables.get('expectedStatusCode');\r",
							"    pm.response.to.have.status(expStatusCode);    \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"if (pm.response.code ===404)\r",
							"{\r",
							"    var responseMessage = pm.response.text(); \r",
							"    var possibleMessages = [\r",
							"            'Invalid endpoint',\r",
							"            'Application Error'           \r",
							"        ];      \r",
							"      \r",
							"     var messageFound = possibleMessages.some(msg => responseMessage.includes(msg));\r",
							"        console.log(messageFound);\r",
							"       pm.expect(messageFound).to.be.true;\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "29b6d915-0b5f-4908-81cf-c6b797d39104",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "413490af-6e36-417c-b191-9fdea7c33df4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"url": "{{baseURL}}{{GetAllBatches_Endpoint}}"
			},
			"response": []
		},
		{
			"name": "CREATE_BATCH",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f508f6b4-ca58-4b11-85c3-1bdcbc1d3c4a",
						"exec": [
							"\r",
							"\r",
							"console.log(\"Json file batchName ::\" +pm.variables.get('batchName'));\r",
							"console.log(\"CollectionVariable Name::\" + pm.collectionVariables.get('programId1'));\r",
							"\r",
							"if(pm.variables.get('batchName') == \"prg1Oracle5335\")\r",
							"{   \r",
							"    pm.variables.set(\"programId\",pm.collectionVariables.get('programId1'));\r",
							"    pm.variables.set('programName',pm.collectionVariables.get('programName1'))\r",
							"}\r",
							"else if((pm.variables.get('batchName') == \"prg1Oracle5336\"))\r",
							"{\r",
							"      pm.variables.set(\"programId\",pm.collectionVariables.get('programId1'));\r",
							"    pm.variables.set('programName',pm.collectionVariables.get('programName1'))\r",
							"\r",
							"}\r",
							"else if((pm.variables.get('batchName') == \"prg2Python512\"))\r",
							"{\r",
							"      pm.variables.set(\"programId\",pm.collectionVariables.get('programId2'));\r",
							"    pm.variables.set('programName',pm.collectionVariables.get('programName2'))\r",
							"}\r",
							"else if((pm.variables.get('batchName') == \"prg2Python513\"))\r",
							"{\r",
							"     pm.variables.set(\"programId\",pm.collectionVariables.get('programId2'));\r",
							"    pm.variables.set('programName',pm.collectionVariables.get('programName2'))\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cb50c81a-da88-477e-8ab7-126d1a11a23f",
						"exec": [
							"var CreateBatchSchema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"batchId\": {\r",
							"      \"type\": [\"number\", \"null\"]\r",
							"    },\r",
							"    \"batchName\": {\r",
							"      \"type\": [\"string\", \"null\"]\r",
							"    },\r",
							"    \"batchDescription\": {\r",
							"      \"type\": [\"string\", \"null\"]\r",
							"    },\r",
							"    \"batchStatus\": {\r",
							"      \"type\": [\"string\", \"null\"]\r",
							"    },\r",
							"    \"batchNoOfClasses\": {\r",
							"      \"type\": [\"number\", \"null\"]\r",
							"    },\r",
							"    \"programId\": {\r",
							"      \"type\": [\"number\", \"null\"]\r",
							"    },\r",
							"    \"programName\": {\r",
							"      \"type\": [\"string\", \"null\"]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"batchId\",\r",
							"    \"batchName\",\r",
							"    \"batchDescription\",\r",
							"    \"batchStatus\",\r",
							"    \"batchNoOfClasses\",\r",
							"    \"programId\",\r",
							"    \"programName\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"if (pm.response.code != 201) {\r",
							"pm.test(\"StatusCodeValidation\", function () {\r",
							" const expStatusCode = pm.variables.get('expectedStatusCode');\r",
							"    pm.response.to.have.status(expStatusCode);\r",
							"});\r",
							"pm.test(\"ResponseMessage Validation\", function () { \r",
							"    const result = pm.response.json();  \r",
							"var Actualmesg=result.success;\r",
							"var expStstusmesg= pm.variables.get('ResponseMessage');\r",
							" pm.expect(Actualmesg).to.eql(expStstusmesg); \r",
							"    \r",
							"});\r",
							"\r",
							"}\r",
							"\r",
							"const result = JSON.parse(responseBody)\r",
							"console.log(\"BAtch ID:\"+ result.batchId  + result.batchName);\r",
							"if (pm.response.code === 201 && result.batchName === \"prg1Oracle5333\") {    \r",
							"    console.log('creating collectionVariable - prog1batchId1 && prog1batchName1.');          \r",
							"    pm.collectionVariables.set(\"prg1_batchId1\", result.batchId);  \r",
							"    pm.collectionVariables.set(\"prg1_batchName1\", result.batchName); \r",
							"}\r",
							"else if (pm.response.code === 201 && result.batchName === \"prg1Oracle5334\") {  \r",
							"    console.log('creating collectionVariable - prog1batchId2 && prog1batchName2.');       \r",
							"    pm.collectionVariables.set(\"prg1_batchId2\", result.batchId);  \r",
							"    pm.collectionVariables.set(\"prg1_batchName2\", result.batchName); \r",
							"}\r",
							"else if (pm.response.code === 201 && result.batchName === \"prg2Python510\") {   \r",
							"   console.log('creating collectionVariable - prog2batchId1 && prog2batchName1.');          \r",
							"    pm.collectionVariables.set(\"prg2_batchId1\", result.batchId);  \r",
							"    pm.collectionVariables.set(\"prg2_batchName1\", result.batchName); \r",
							"}\r",
							"else if (pm.response.code === 201 && result.batchName === \"prg2Python511\") {   \r",
							"   console.log('creating collectionVariable - prog2batchId2 && prog2batchName2.');          \r",
							"    pm.collectionVariables.set(\"prg2_batchId2\", result.batchId);  \r",
							"    pm.collectionVariables.set(\"prg2_batchName2\", result.batchName); \r",
							"}\r",
							"\r",
							"\r",
							"if(pm.response.code ===201)\r",
							"{\r",
							"    \r",
							"pm.test(\"Data Type Valiadtion-- \", () => {\r",
							"const response = pm.response.json();\r",
							"    // batchId should be an integer\r",
							"    pm.expect(response.batchId).to.be.a('number');\r",
							"    \r",
							"    // batchName \r",
							"    pm.expect(response.batchName).to.be.a('string');\r",
							"    \r",
							"    // batchDescription \r",
							"    pm.expect(response.batchDescription).to.be.a('string');\r",
							"    \r",
							"    // batchStatus \r",
							"    pm.expect(response.batchStatus).to.be.a('string');\r",
							"    \r",
							"    // batchNoOfClasses \r",
							"    pm.expect(response.batchNoOfClasses).to.be.a('number' );\r",
							"    \r",
							"    // programId \r",
							"    pm.expect(response.programId).to.be.a('number');\r",
							"    \r",
							"    // programName \r",
							"    pm.expect(response.programName).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Schema Validation-- \", () => {\r",
							"    pm.response.to.have.jsonSchema(CreateBatchSchema);\r",
							"});\r",
							"\r",
							"pm.test(\"StatusCodeValidation\", function () {\r",
							" const expStatusCode = pm.variables.get('expectedStatusCode');\r",
							"    pm.response.to.have.status(expStatusCode);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type-Validation\",function () {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json');\r",
							"});\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "dedbcc47-3195-4fc9-b28b-1a84aa68aa24",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},  \r\n  \"programName\":\"{{programName}}\"\r\n }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}{{CreateBatch_Endpoint}}"
			},
			"response": []
		},
		{
			"name": "GET_BATCH_BY_BATCHID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "80ee0e07-5349-48c1-9216-eebb40b5dc7a",
						"exec": [
							"var method=pm.variables.get('method');\r",
							"pm.variables.set('METHOD',method);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0bc47954-9e4e-4ec2-b2eb-b03a1014f029",
						"exec": [
							"var GetBatchById=\r",
							"{\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"batchId\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"batchName\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"batchDescription\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"batchStatus\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"batchNoOfClasses\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"programId\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"programName\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"batchId\",\r",
							"    \"batchName\",\r",
							"    \"batchDescription\",\r",
							"    \"batchStatus\",\r",
							"    \"batchNoOfClasses\",\r",
							"    \"programId\",\r",
							"    \"programName\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"if(pm.response.code === 200){\r",
							"  pm.test(\"GetBatchById Schema Validation\",function () {\r",
							"    pm.response.to.have.jsonSchema(GetBatchById);\r",
							"  });\r",
							"\r",
							"  //2.Response  code validation\r",
							"  pm.test(\"Status code is 200 or 201\", () => {\r",
							"      pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"  });\r",
							"\r",
							"  //3.content type validation\r",
							"  pm.test(\"Content-Type is application/json\", () => {\r",
							"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"  });\r",
							"\r",
							"  //4. Data type validation:\r",
							"  pm.test(\"Data type validation --Get GetBatchById\",function(){\r",
							"    const result = pm.response.json(); \r",
							"    //Parse the json response\r",
							"    pm.expect(result).to.be.an('object'); \r",
							"    // Check if the result is an object\r",
							"\r",
							"    // Validate batchId: should be a number or null\r",
							"    pm.expect(result).to.have.property('batchId');\r",
							"    pm.expect(result.batchId).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"    // Validate batchName: should be a string or null\r",
							"    pm.expect(result).to.have.property('batchName');\r",
							"    pm.expect(result.batchName).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"    // Validate batchDescription: should be a string or null\r",
							"    pm.expect(result).to.have.property('batchDescription');\r",
							"    pm.expect(result.batchDescription).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"    // Validate batchStatus: should be a string or null\r",
							"    pm.expect(result).to.have.property('batchStatus');\r",
							"    pm.expect(result.batchStatus).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"    // Validate batchNoOfClasses: should be a string, number, or null\r",
							"    pm.expect(result).to.have.property('batchNoOfClasses');\r",
							"    pm.expect(result.batchNoOfClasses).to.satisfy(val => typeof val === 'string' || typeof val === 'number' || val === null);\r",
							"\r",
							"    // Validate programId: should be a number or null\r",
							"    pm.expect(result).to.have.property('programId');\r",
							"    pm.expect(result.programId).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"    // Validate programName: should be a string or null\r",
							"    pm.expect(result).to.have.property('programName');\r",
							"    pm.expect(result.programName).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"  });\r",
							"\r",
							"\r",
							"}\r",
							"\r",
							"pm.test(\"StatusCodeValidation\", function () {\r",
							" const expStatusCode = pm.variables.get('expectedStatusCode');\r",
							"    pm.response.to.have.status(expStatusCode);    \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "66e545d2-d1ae-4631-8712-7d32535042ef",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"url": "{{baseURL}}{{GetBatchByBatchId_endpoint}}{{prg2_batchId1}}"
			},
			"response": []
		},
		{
			"name": "GET_BATCH_BY_BATCHNAME",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "de6728ee-e819-4be2-9635-044381c6c172",
						"exec": [
							"var method=pm.variables.get('method');\r",
							"pm.variables.set('METHOD',method);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "77234160-66c1-424a-b222-771009b51141",
						"exec": [
							"var GetBatchByBatchName=\r",
							"{\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"batchId\": {\r",
							"        \"type\": \"number\"\r",
							"      },\r",
							"      \"batchName\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"batchDescription\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"batchStatus\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"batchNoOfClasses\": {\r",
							"        \"type\": \"number\"\r",
							"      },\r",
							"      \"programId\": {\r",
							"        \"type\": \"number\"\r",
							"      },\r",
							"      \"programName\": {\r",
							"        \"type\": \"string\"\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"batchId\",\r",
							"      \"batchName\",\r",
							"      \"batchDescription\",\r",
							"      \"batchStatus\",\r",
							"      \"batchNoOfClasses\",\r",
							"      \"programId\",\r",
							"      \"programName\"\r",
							"    ]\r",
							"  }\r",
							"}\r",
							"if(pm.response.code === 200){\r",
							"  pm.test(\"GetBatchByBatchName Schema Validation\",function () {\r",
							"    pm.response.to.have.jsonSchema(GetBatchByBatchName);\r",
							"  });\r",
							"\r",
							"  //2.Response  code validation\r",
							"  pm.test(\"Status code is 200 or 201\", () => {\r",
							"      pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"  });\r",
							"\r",
							"  //3.content type validation\r",
							"  pm.test(\"Content-Type is application/json\", () => {\r",
							"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"  });\r",
							"\r",
							"\r",
							"  //4. Data type validation:\r",
							"  pm.test(\"Data type validation --Get BatchByBatchName\",function(){\r",
							"    const result = pm.response.json(); \r",
							"    //Parse the json response\r",
							"   pm.expect(result).to.be.an('object'); \r",
							"    // Check if the result is an object\r",
							"\r",
							"\r",
							"     result.forEach(batch_ => {\r",
							"    // Validate batchId: should be a number or null\r",
							"    pm.expect(batch_).to.have.property('batchId');\r",
							"    pm.expect(batch_.batchId).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"    // Validate batchName: should be a string or null\r",
							"    pm.expect(batch_).to.have.property('batchName');\r",
							"    pm.expect(batch_.batchName).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"    // Validate batchDescription: should be a string or null\r",
							"    pm.expect(batch_).to.have.property('batchDescription');\r",
							"    pm.expect(batch_.batchDescription).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"    // Validate batchStatus: should be a string or null\r",
							"    pm.expect(batch_).to.have.property('batchStatus');\r",
							"    pm.expect(batch_.batchStatus).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"    // Validate batchNoOfClasses: should be a string, number, or null\r",
							"    pm.expect(batch_).to.have.property('batchNoOfClasses');\r",
							"    pm.expect(batch_.batchNoOfClasses).to.satisfy(val => typeof val === 'string' || typeof val === 'number' || val === null);\r",
							"\r",
							"    // Validate programId: should be a number or null\r",
							"    pm.expect(batch_).to.have.property('programId');\r",
							"    pm.expect(batch_.programId).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"    // Validate programName: should be a string or null\r",
							"    pm.expect(batch_).to.have.property('programName');\r",
							"    pm.expect(batch_.programName).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"  });\r",
							"  });\r",
							"\r",
							"  }\r",
							"pm.test(\"StatusCodeValidation\", function () {\r",
							" const expStatusCode = pm.variables.get('expectedStatusCode');\r",
							"    pm.response.to.have.status(expStatusCode);    \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "81aa218c-339e-48c2-838c-e5d6ec8b05f8",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}{{GetBatchByName_endpoint}}{{prg2_batchName2}}"
			},
			"response": []
		},
		{
			"name": "UPD_BATCH_BY_BATCHID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bfe226b2-86a2-470e-b36a-57baa137d844",
						"exec": [
							"var method=pm.variables.get('method');\r",
							"pm.variables.set('METHOD',method);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7a9713fc-5a23-4ec6-9c16-3628d9f48a0c",
						"exec": [
							"var updateBatchById=\r",
							"{\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"batchId\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"batchName\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"batchDescription\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"batchStatus\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"batchNoOfClasses\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"programId\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"programName\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"batchId\",\r",
							"    \"batchName\",\r",
							"    \"batchDescription\",\r",
							"    \"batchStatus\",\r",
							"    \"batchNoOfClasses\",\r",
							"    \"programId\",\r",
							"    \"programName\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"if(pm.response.code === 200){\r",
							"  pm.test(\"updateBatchById Schema Validation\",function () {\r",
							"    pm.response.to.have.jsonSchema(updateBatchById);\r",
							"  });\r",
							"\r",
							"  //2.Response  code validation\r",
							"  pm.test(\"Status code is 200 or 201\", () => {\r",
							"      pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"  });\r",
							"\r",
							"  //3.content type validation\r",
							"  pm.test(\"Content-Type is application/json\", () => {\r",
							"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"  });\r",
							"\r",
							"  //4. Data type validation:\r",
							"  pm.test(\"Data type validation --Get GetBatchById\",function(){\r",
							"    const result = pm.response.json(); \r",
							"    //Parse the json response\r",
							"    pm.expect(result).to.be.an('object'); \r",
							"    // Check if the result is an object\r",
							"\r",
							"    // Validate batchId: should be a number or null\r",
							"    pm.expect(result).to.have.property('batchId');\r",
							"    pm.expect(result.batchId).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"    // Validate batchName: should be a string or null\r",
							"    pm.expect(result).to.have.property('batchName');\r",
							"    pm.expect(result.batchName).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"    // Validate batchDescription: should be a string or null\r",
							"    pm.expect(result).to.have.property('batchDescription');\r",
							"    pm.expect(result.batchDescription).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"    // Validate batchStatus: should be a string or null\r",
							"    pm.expect(result).to.have.property('batchStatus');\r",
							"    pm.expect(result.batchStatus).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"    // Validate batchNoOfClasses: should be a string, number, or null\r",
							"    pm.expect(result).to.have.property('batchNoOfClasses');\r",
							"    pm.expect(result.batchNoOfClasses).to.satisfy(val => typeof val === 'string' || typeof val === 'number' || val === null);\r",
							"\r",
							"    // Validate programId: should be a number or null\r",
							"    pm.expect(result).to.have.property('programId');\r",
							"    pm.expect(result.programId).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"    // Validate programName: should be a string or null\r",
							"    pm.expect(result).to.have.property('programName');\r",
							"    pm.expect(result.programName).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"  });\r",
							"\r",
							"\r",
							"}\r",
							"\r",
							"pm.test(\"StatusCodeValidation\", function () {\r",
							" const expStatusCode = pm.variables.get('expectedStatusCode');\r",
							"    pm.response.to.have.status(expStatusCode);    \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "bd6732b9-e7e6-4461-9df8-9bf9ab4d88d5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{prg1_batchName1}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId1}},\r\n  \"programName\": \"{{programName1}}\"\r\n\r\n }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}{{UpdatebyBatchId_Endpoint}}{{prg1_batchId1}}"
			},
			"response": []
		},
		{
			"name": "GET_BATCH_BY_PROGRAMID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "62c682f3-221a-4653-9922-8422c2172e7b",
						"exec": [
							"var method=pm.variables.get('method');\r",
							"pm.variables.set('METHOD',method);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2e7d491f-8117-4745-9d01-a140d8eb0b96",
						"exec": [
							"var GetBatchByProgramId=\r",
							"{\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"batchId\": {\r",
							"        \"type\": \"number\"\r",
							"      },\r",
							"      \"batchName\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"batchDescription\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"batchStatus\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"batchNoOfClasses\": {\r",
							"        \"type\": \"number\"\r",
							"      },\r",
							"      \"programId\": {\r",
							"        \"type\": \"number\"\r",
							"      },\r",
							"      \"programName\": {\r",
							"        \"type\": \"string\"\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"batchId\",\r",
							"      \"batchName\",\r",
							"      \"batchDescription\",\r",
							"      \"batchStatus\",\r",
							"      \"batchNoOfClasses\",\r",
							"      \"programId\",\r",
							"      \"programName\"\r",
							"    ]\r",
							"  }\r",
							"}\r",
							"if(pm.response.code === 200){\r",
							"  pm.test(\"GetBatchById Schema Validation\",function () {\r",
							"    console.log(pm.response.text());\r",
							"    pm.response.to.have.jsonSchema(GetBatchByProgramId);\r",
							"  });\r",
							"\r",
							"  //2.Response  code validation\r",
							"  pm.test(\"Status code is 200 or 201\", () => {\r",
							"      pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"  });\r",
							"\r",
							"  //3.content type validation\r",
							"  pm.test(\"Content-Type is application/json\", () => {\r",
							"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"  });\r",
							"\r",
							"  //4. Data type validation:\r",
							"  pm.test(\"Data type validation --Get GetBatchByProgramId\",function(){\r",
							"    const result = pm.response.json(); \r",
							"    //Parse the json response\r",
							"    pm.expect(result).to.be.an('array'); \r",
							"    // Check if the result is an object\r",
							"// Iterate over each batch in the response array\r",
							"    result.forEach(batch_ => {\r",
							"    // Validate batchId: should be a number or null\r",
							"    pm.expect(batch_).to.have.property('batchId');\r",
							"    pm.expect(batch_.batchId).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"    // Validate batchName: should be a string or null\r",
							"    pm.expect(batch_).to.have.property('batchName');\r",
							"    pm.expect(batch_.batchName).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"    // Validate batchDescription: should be a string or null\r",
							"    pm.expect(batch_).to.have.property('batchDescription');\r",
							"    pm.expect(batch_.batchDescription).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"    // Validate batchStatus: should be a string or null\r",
							"    pm.expect(batch_).to.have.property('batchStatus');\r",
							"    pm.expect(batch_.batchStatus).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"    // Validate batchNoOfClasses: should be a string, number, or null\r",
							"    pm.expect(batch_).to.have.property('batchNoOfClasses');\r",
							"    pm.expect(batch_.batchNoOfClasses).to.satisfy(val => typeof val === 'string' || typeof val === 'number' || val === null);\r",
							"\r",
							"    // Validate programId: should be a number or null\r",
							"    pm.expect(batch_).to.have.property('programId');\r",
							"    pm.expect(batch_.programId).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"    // Validate programName: should be a string or null\r",
							"    pm.expect(batch_).to.have.property('programName');\r",
							"    pm.expect(batch_.programName).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"  });\r",
							"  });\r",
							"\r",
							"}\r",
							"pm.test(\"StatusCodeValidation\", function () {\r",
							" const expStatusCode = pm.variables.get('expectedStatusCode');\r",
							"    pm.response.to.have.status(expStatusCode);    \r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "9621fa02-7194-4e35-8a65-754f1a39b8d3",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"url": "{{baseURL}}{{GetBatchByProgramId_endpoint}}{{programId1}}"
			},
			"response": []
		},
		{
			"name": "POST_CLASS_CREATE",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e40643f6-5dd6-4488-8b19-2aebb68c0577",
						"exec": [
							"var method=pm.variables.get('method');\r",
							"pm.variables.set('METHOD',method);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "44410d74-ef34-4df8-853b-2f0f7f39e5d4",
						"exec": [
							"var CreateClassSchema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"csId\": {\r",
							"      \"type\": [\"number\", \"null\"]\r",
							"    },\r",
							"    \"batchId\": {\r",
							"      \"type\": [\"number\", \"null\"]\r",
							"    },\r",
							"    \"classNo\": {\r",
							"      \"type\": [\"number\", \"null\"]\r",
							"    },\r",
							"    \"classDate\": {\r",
							"      \"type\": [\"string\", \"null\"]\r",
							"    },\r",
							"    \"classTopic\": {\r",
							"      \"type\": [\"string\", \"null\"]\r",
							"    },\r",
							"    \"classStatus\": {\r",
							"      \"type\": [\"string\", \"null\"]\r",
							"    },\r",
							"    \"classStaffId\": {\r",
							"      \"type\": [\"string\", \"null\"]\r",
							"    },\r",
							"    \"classDescription\": {\r",
							"      \"type\": [\"string\", \"null\"]\r",
							"    },\r",
							"    \"classComments\": {\r",
							"      \"type\": [\"string\", \"null\"]\r",
							"    },\r",
							"    \"classNotes\": {\r",
							"      \"type\": [\"string\", \"null\"]\r",
							"    },\r",
							"    \"classRecordingPath\": {\r",
							"      \"type\": [\"string\", \"null\"]\r",
							"    },\r",
							"    \"batchName\": {\r",
							"      \"type\": [\"string\", \"null\"]\r",
							"    },\r",
							"   \r",
							"\r",
							"  },\r",
							"  \"required\": [ \r",
							"    \"batchId\",\r",
							"    \"classNo\",\r",
							"    \"classDate\",\r",
							"    \"classStaffId\",\r",
							"    \"classScheduledDates\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"const result = pm.response.json();\r",
							"console.log(\"csId:\"+ result.csId);\r",
							"console.log(\"classTopic:\"+ result.classTopic);\r",
							"if (pm.response.code === 201 ) {\r",
							"    console.log('creating collectionVariable - classId');\r",
							"    pm.collectionVariables.set(\"classId\", result.csId);\r",
							"    console.log('creating another collectionVariable - classId2');\r",
							"    pm.collectionVariables.set(\"classId2\", result.csId);\r",
							"    console.log('creating collectionVariable - classTopic');\r",
							"    pm.collectionVariables.set(\"classTopic\", result.classTopic);\r",
							"    // Updated by Renu for Update class\r",
							"    pm.collectionVariables.set(\"classDate\", result.classDate);\r",
							"    pm.collectionVariables.set(\"classNo\", result.classNo);\r",
							"    pm.collectionVariables.set(\"classStaffId\", result.classStaffId);\r",
							"    pm.collectionVariables.set(\"classStatus\", result.classStatus);\r",
							"    pm.collectionVariables.set(\"classDescription\", result.classDescription);\r",
							"    pm.collectionVariables.set(\"classComments\", result.classComments);\r",
							"    pm.collectionVariables.set(\"classNotes\", result.classNotes);\r",
							"    pm.collectionVariables.set(\"classRecordingPath\", result.classRecordingPath);\r",
							"    pm.collectionVariables.set(\"batchName\", result.batchName);\r",
							"    pm.collectionVariables.set(\"classScheduledDates\", result.classScheduledDates);\r",
							"}\r",
							"\r",
							"pm.test(\"Content-Type-Validation\",function () {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"StatusCodeValidation\", function () {\r",
							" const expStatusCode = pm.variables.get('expectedStatusCode');\r",
							"    pm.response.to.have.status(expStatusCode);    \r",
							"});\r",
							"\r",
							"//1.code validation\r",
							"pm.test(\"Status code is 201 or 400 or 404 or 401\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 400, 404, 401]);\r",
							"});\r",
							"\r",
							"if(pm.response.code ===201)\r",
							"{\r",
							"pm.test(\"Schema Validation-- \", () => {\r",
							"    pm.response.to.have.jsonSchema(CreateClassSchema);\r",
							"});\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "0c9466df-47d1-4d62-8081-d543f960ca60",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\r\n    \"csId\": \"{{csId}}\",   \r\n    \"batchId\": \"{{prg2_batchId2}}\",\r\n    \"classNo\": \"{{classNo}}\",\r\n    \"classDate\": \"{{classDate}}\",\r\n    \"classTopic\": \"{{classTopic}}\",\r\n    \"classStatus\": \"{{classStatus}}\",\r\n    \"classStaffId\": \"{{classStaffId}}\",\r\n    \"classDescription\": \"{{classDescription}}\",\r\n    \"classComments\": \"{{classComments}}\",\r\n    \"classNotes\": \"{{classNotes}}\",\r\n    \"classRecordingPath\": \"{{classRecordingPath}}\",\r\n    \"batchName\": \"{{prg2_batchName2}}\",\r\n    \"classScheduledDates\": [\r\n        \"{{classScheduledDates}}\"\r\n    ]\r\n    }\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}{{endpoint}}"
			},
			"response": []
		},
		{
			"name": "GET_ALL_CLASS_LIST",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "96ca0a85-9928-4d84-8d8a-6f7e7556f6a1",
						"exec": [
							"var method=pm.variables.get('method');\r",
							"pm.variables.set('METHOD',method);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d89ff4d0-2ddf-4e3f-ae4e-c63f82bb76c5",
						"exec": [
							"pm.test(\"Content-Type-Validation\",function () {\r",
							"        pm.response.to.have.header('Content-Type', 'application/json');\r",
							"    });\r",
							"\r",
							"pm.test(\"StatusCodeValidation\", function () {\r",
							" const expStatusCode = pm.variables.get('expectedStatusCode');\r",
							"    pm.response.to.have.status(expStatusCode);    \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "b1d44c46-fd7e-4af8-84c2-f25927bc8ec7",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"url": "{{baseURL}}{{endpoint}}"
			},
			"response": []
		},
		{
			"name": "GET_CLASS_RECRD_BYBATCHID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f656edec-43c6-456b-8601-b3cf89046fc7",
						"exec": [
							"var method=pm.variables.get('method');\r",
							"pm.variables.set('METHOD',method);\r",
							"\r",
							"// Set AUTHORIZATION variable to baseURL\r",
							"pm.variables.set('AUTHORIZATION', pm.collectionVariables.get('baseURL'));\r",
							"\r",
							"// Add Authorization header\r",
							"pm.request.headers.add({\r",
							"  key: 'Authorization',\r",
							"  value: pm.variables.get('AUTHORIZATION')\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b55e8f71-b3ca-44de-a229-4e64c833ea73",
						"exec": [
							"\r",
							"var getClassRecordingsByBatchIdSchema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated Recordings Response\",\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"csId\": {\r",
							"        \"type\":  [\"number\", \"null\"]\r",
							"        },\r",
							"      \"classRecordingPath\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"csId\",\r",
							"\t  \"classRecordingPath\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"if(pm.response.code === 200){\r",
							"    pm.test(\"getClassRecordingsByBatchIdSchema Validation\",function ()\r",
							"    {\r",
							"        pm.response.to.have.jsonSchema(getClassRecordingsByBatchIdSchema);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Content-Type-Validation\",function () {\r",
							"        pm.response.to.have.header('Content-Type', 'application/json');\r",
							"    });\r",
							"\r",
							"    pm.test(\"Data Type Validation -- GET CLASS RECORDINGS BY BATCH ID\", function () {\r",
							"    const result = pm.response.json();  // Parse the JSON response\r",
							"   \r",
							"        // Validate csId: should be a number or null\r",
							"       // pm.expect(result).to.have.property('csId');\r",
							"        pm.expect(result.csId).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"        // Validate classRecordingPath: should be a string or null\r",
							"      //  pm.expect(result).to.have.property('classRecordingPath');\r",
							"        pm.expect(result.classRecordingPath).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							"pm.test(\"StatusCodeValidation\", function () {\r",
							" const expStatusCode = pm.variables.get('expectedStatusCode');\r",
							"    pm.response.to.have.status(expStatusCode);    \r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "a85bff9d-0dd8-43cd-b18c-de52277067b2",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}{{endpoint}}{{prg2_batchId2}}"
			},
			"response": []
		},
		{
			"name": "GET_CLASS_CSID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8e609df7-d707-497c-bce0-9b3141557798",
						"exec": [
							"var method=pm.variables.get('method');\r",
							"pm.variables.set('METHOD',method);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c4c4f853-2fce-413b-bbdc-721ddd0cbe68",
						"exec": [
							"pm.test(\"StatusCodeValidation\", function () {\r",
							" const expStatusCode = pm.variables.get('expectedStatusCode');\r",
							"    pm.response.to.have.status(expStatusCode);    \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "d61e215f-7aea-4a5a-95cf-3024fa6be046",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}{{endpoint}}{{classId}}"
			},
			"response": []
		},
		{
			"name": "GET_CLASS_BY_CSTOPIC",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5ae11001-ef47-444c-b36c-a30fd4efc375",
						"exec": [
							"var method=pm.variables.get('method');\r",
							"pm.variables.set('METHOD',method);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e31a27c5-53f9-4fbf-9d2a-20c5282584c3",
						"exec": [
							"\r",
							"//3.content type validation\r",
							" pm.test(\"Content-Type-Validation\",function () {\r",
							"        pm.response.to.have.header('Content-Type', 'application/json');\r",
							"    });\r",
							"\r",
							"pm.test(\"StatusCodeValidation\", function () {\r",
							" const expStatusCode = pm.variables.get('expectedStatusCode');\r",
							"    pm.response.to.have.status(expStatusCode);    \r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "f46869c2-c677-43b4-967c-3dd0cb09cd7e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}{{endpoint}}{{classTopic}}"
			},
			"response": []
		},
		{
			"name": "GET ALL CLASSES BY BATCHID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "adcbc096-363e-4594-b82e-4967fadc0746",
						"exec": [
							"var method=pm.variables.get('method');\r",
							"pm.variables.set('METHOD',method);\r",
							"// Set AUTHORIZATION variable to baseURL\r",
							"pm.variables.set('AUTHORIZATION', pm.collectionVariables.get('baseURL'));\r",
							"\r",
							"// Add Authorization header\r",
							"pm.request.headers.add({\r",
							"  key: 'Authorization',\r",
							"  value: pm.variables.get('AUTHORIZATION')\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b0331611-e5b1-4d0d-9449-f4f430f2a4c1",
						"exec": [
							"var getAllClassesByBatchIdSchema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"csId\": {\r",
							"        \"type\":  [\"number\", \"null\"]\r",
							"        },\r",
							"      \"batchId\": {\r",
							"        \"type\":  [\"number\", \"null\"]\r",
							"      },\r",
							"      \"classNo\": {\r",
							"        \"type\":  [\"number\", \"null\"]\r",
							"      },\r",
							"      \"classDate\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      },\r",
							"      \"classTopic\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      },\r",
							"      \"classStatus\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      },\r",
							"      \"classStaffId\": {\r",
							"        \"type\": [\"string\", \"null\"]\r",
							"      },\r",
							"      \"classDescription\": {\r",
							"        \"type\": [\"string\", \"null\"]\r",
							"      },\r",
							"      \"classComments\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      },\r",
							"      \"classNotes\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      },\r",
							"      \"classRecordingPath\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      },\r",
							"      \"batchName\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"batchId\",\r",
							"      \"classNo\",\r",
							"\t  \"classDate\",\r",
							"\t  \"classTopic\",\r",
							"\t  \"classStatus\",\r",
							"\t  \"classStaffId\",\r",
							"\t  \"batchName\"\r",
							"    ]\r",
							"  }\r",
							"}\r",
							"\r",
							"if(pm.response.code === 200){\r",
							"    pm.test(\"getAllClassesByBatchIdSchema Validation\",function ()\r",
							"    {\r",
							"        pm.response.to.have.jsonSchema(getAllClassesByBatchIdSchema);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Content-Type-Validation\",function () {\r",
							"        pm.response.to.have.header('Content-Type', 'application/json');\r",
							"    });\r",
							"\r",
							"    pm.test(\"Data Type Validation -- GET ALL CLASSES BY BATCH ID\", function () {\r",
							"    const result = pm.response.json();  // Parse the JSON response\r",
							"\r",
							"    // Validate that the response is an array\r",
							"    pm.expect(result).to.be.an('array');\r",
							"    \r",
							"    // Check if the array is not empty\r",
							"    pm.expect(result.length).to.be.greaterThan(0);\r",
							"\r",
							"    // Iterate over each batch in the response array\r",
							"    result.forEach(class_ => {\r",
							"        // Validate batchId: should be a number or null\r",
							"        pm.expect(class_).to.have.property('batchId');\r",
							"        pm.expect(class_.batchId).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"        // Validate classNo: should be a number or null\r",
							"        pm.expect(class_).to.have.property('classNo');\r",
							"        pm.expect(class_.classNo).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"\r",
							"        // Validate classDate: should be a string or null\r",
							"        pm.expect(class_).to.have.property('classDate');\r",
							"        pm.expect(class_.classDate).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"        // Validate classTopic: should be a string or null\r",
							"        pm.expect(class_).to.have.property('classTopic');\r",
							"        pm.expect(class_.classTopic).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"        // Validate classStatus: should be a string or null\r",
							"        pm.expect(class_).to.have.property('classStatus');\r",
							"        pm.expect(class_.classStatus).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"        // Validate classStaffId: should be a string or null\r",
							"        pm.expect(class_).to.have.property('classStaffId');\r",
							"        pm.expect(class_.classStaffId).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"        // Validate batchName: should be a string or null\r",
							"        pm.expect(class_).to.have.property('batchName');\r",
							"        pm.expect(class_.batchName).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"    });\r",
							"});\r",
							"\r",
							"}\r",
							"pm.test(\"StatusCodeValidation\", function () {\r",
							" const expStatusCode = pm.variables.get('expectedStatusCode');\r",
							"    pm.response.to.have.status(expStatusCode);    \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "24377844-f238-4179-b131-4c7af8b118f5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}{{GetAllClassesBatchIdEndpoint}}{{prg1_batchId1}}"
			},
			"response": []
		},
		{
			"name": "GET ALL CLASSES BY STAFFID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ad88d3d6-25ef-470d-a191-112095040e19",
						"exec": [
							"var method=pm.variables.get('method');\r",
							"pm.variables.set('METHOD',method);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "42990613-4896-464d-b014-21f95ca30091",
						"exec": [
							"var getAllClassesByStaffIdSchema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"csId\": {\r",
							"        \"type\":  [\"number\", \"null\"]\r",
							"        },\r",
							"      \"batchId\": {\r",
							"        \"type\":  [\"number\", \"null\"]\r",
							"      },\r",
							"      \"classNo\": {\r",
							"        \"type\":  [\"number\", \"null\"]\r",
							"      },\r",
							"      \"classDate\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      },\r",
							"      \"classTopic\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      },\r",
							"      \"classStatus\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      },\r",
							"      \"classStaffId\": {\r",
							"        \"type\": [\"string\", \"null\"]\r",
							"      },\r",
							"      \"classDescription\": {\r",
							"        \"type\": [\"string\", \"null\"]\r",
							"      },\r",
							"      \"classComments\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      },\r",
							"      \"classNotes\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      },\r",
							"      \"classRecordingPath\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      },\r",
							"      \"batchName\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"batchId\",\r",
							"      \"classNo\",\r",
							"\t  \"classDate\",\r",
							"\t  \"classTopic\",\r",
							"\t  \"classStatus\",\r",
							"\t  \"classStaffId\",\r",
							"\t  \"batchName\"\r",
							"    ]\r",
							"  }\r",
							"}\r",
							"\r",
							"if(pm.response.code === 200){\r",
							"    pm.test(\"getAllClassesByStaffIdSchema Validation\",function ()\r",
							"    {\r",
							"        pm.response.to.have.jsonSchema(getAllClassesByStaffIdSchema);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Content-Type-Validation\",function () {\r",
							"        pm.response.to.have.header('Content-Type', 'application/json');\r",
							"    });\r",
							"\r",
							"    pm.test(\"Data Type Validation -- GET ALL CLASSES BY STAFF ID\", function () {\r",
							"    const result = pm.response.json();  // Parse the JSON response\r",
							"\r",
							"    // Validate that the response is an array\r",
							"    pm.expect(result).to.be.an('array');\r",
							"    \r",
							"    // Check if the array is not empty\r",
							"    pm.expect(result.length).to.be.greaterThan(0);\r",
							"\r",
							"    // Iterate over each batch in the response array\r",
							"    result.forEach(class_ => {\r",
							"        // Validate batchId: should be a number or null\r",
							"        pm.expect(class_).to.have.property('batchId');\r",
							"        pm.expect(class_.batchId).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"        // Validate classNo: should be a number or null\r",
							"        pm.expect(class_).to.have.property('classNo');\r",
							"        pm.expect(class_.classNo).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"\r",
							"        // Validate classDate: should be a string or null\r",
							"        pm.expect(class_).to.have.property('classDate');\r",
							"        pm.expect(class_.classDate).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"        // Validate classTopic: should be a string or null\r",
							"        pm.expect(class_).to.have.property('classTopic');\r",
							"        pm.expect(class_.classTopic).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"        // Validate classStatus: should be a string or null\r",
							"        pm.expect(class_).to.have.property('classStatus');\r",
							"        pm.expect(class_.classStatus).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"        // Validate classStaffId: should be a string or null\r",
							"        pm.expect(class_).to.have.property('classStaffId');\r",
							"        pm.expect(class_.classStaffId).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"        // Validate batchName: should be a string or null\r",
							"        pm.expect(class_).to.have.property('batchName');\r",
							"        pm.expect(class_.batchName).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"    });\r",
							"});\r",
							"\r",
							"}\r",
							"pm.test(\"StatusCodeValidation\", function () {\r",
							" const expStatusCode = pm.variables.get('expectedStatusCode');\r",
							"    pm.response.to.have.status(expStatusCode);    \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "806adab8-82c2-47b0-a742-fb1bd1d7990d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"url": "{{baseURL}}{{GetAllClassesStaffIdEndpoint}}{{classStaffId}}"
			},
			"response": []
		},
		{
			"name": "GET ALL RECORDINGS",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "aba5d90f-6238-4558-bfe8-deb78d74b258",
						"exec": [
							"var method=pm.variables.get('method');\r",
							"pm.variables.set('METHOD',method);\r",
							"\r",
							"/*\r",
							"// Set AUTHORIZATION variable to baseURL\r",
							"pm.variables.set('AUTHORIZATION', pm.collectionVariables.get('baseURL'));\r",
							"\r",
							"// Add Authorization header\r",
							"pm.request.headers.add({\r",
							"  key: 'Authorization',\r",
							"  value: pm.variables.get('AUTHORIZATION')\r",
							"});\r",
							"*/"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "785e2a98-0bb0-48b5-8c10-840b6224abb7",
						"exec": [
							"var getAllRecordingsSchema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"csId\": {\r",
							"        \"type\":  [\"number\", \"null\"]\r",
							"        },\r",
							"      \"classRecordingPath\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"csId\",\r",
							"\t  \"classRecordingPath\"\r",
							"    ]\r",
							"  }\r",
							"}\r",
							"\r",
							"if(pm.response.code === 200){\r",
							"    pm.test(\"getAllRecordingsSchema Validation\",function ()\r",
							"    {\r",
							"        pm.response.to.have.jsonSchema(getAllRecordingsSchema);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Content-Type-Validation\",function () {\r",
							"        pm.response.to.have.header('Content-Type', 'application/json');\r",
							"    });\r",
							"\r",
							"    pm.test(\"Data Type Validation -- GET ALL RECORDINGS \", function () {\r",
							"    const result = pm.response.json();  // Parse the JSON response\r",
							"\r",
							"    // Validate that the response is an array\r",
							"    pm.expect(result).to.be.an('array');\r",
							"    \r",
							"    // Check if the array is not empty\r",
							"    pm.expect(result.length).to.be.greaterThan(0);\r",
							"\r",
							"    // Iterate over each batch in the response array\r",
							"    result.forEach(class_ => {\r",
							"        // Validate csId: should be a number or null\r",
							"       // pm.expect(class_).to.have.property('csId');\r",
							"        pm.expect(class_.csId).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"        // Validate classRecordingPath: should be a string or null\r",
							"      //  pm.expect(class_).to.have.property('classRecordingPath');\r",
							"        pm.expect(class_.classRecordingPath).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"    });\r",
							"\t});\r",
							"}\r",
							"\r",
							"pm.test(\"StatusCodeValidation\", function () {\r",
							" const expStatusCode = pm.variables.get('expectedStatusCode');\r",
							"    pm.response.to.have.status(expStatusCode);    \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "f7210a84-2e2a-4e3e-b8d8-2d7c4e09b310",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"url": "{{baseURL}}{{GetAllRecordingsEndpoint}}"
			},
			"response": []
		},
		{
			"name": "GET CLASS RECORDINGS BY CLASS ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b44ecc1d-525f-4ee5-bd77-b22c0fbeebe8",
						"exec": [
							"var method=pm.variables.get('method');\r",
							"pm.variables.set('METHOD',method);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "46bd811b-c8c5-4632-8137-e3c70b5f32e6",
						"exec": [
							"\r",
							"var getClassRecordingsByClassIdSchema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated Recordings Response\",\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"csId\": {\r",
							"        \"type\":  [\"number\", \"null\"]\r",
							"        },\r",
							"      \"classRecordingPath\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"csId\",\r",
							"\t  \"classRecordingPath\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"if(pm.response.code === 200){\r",
							"    pm.test(\"getClassRecordingsByClassIdSchema Validation\",function ()\r",
							"    {\r",
							"        pm.response.to.have.jsonSchema(getClassRecordingsByClassIdSchema);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Content-Type-Validation\",function () {\r",
							"        pm.response.to.have.header('Content-Type', 'application/json');\r",
							"    });\r",
							"\r",
							"    pm.test(\"Data Type Validation -- GET CLASS RECORDINGS BY CLASS ID\", function () {\r",
							"    const result = pm.response.json();  // Parse the JSON response\r",
							"   \r",
							"        // Validate csId: should be a number or null\r",
							"       // pm.expect(result).to.have.property('csId');\r",
							"        pm.expect(result.csId).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"        // Validate classRecordingPath: should be a string or null\r",
							"      //  pm.expect(result).to.have.property('classRecordingPath');\r",
							"        pm.expect(result.classRecordingPath).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"    });\r",
							"}\r",
							"\r",
							"pm.test(\"StatusCodeValidation\", function () {\r",
							" const expStatusCode = pm.variables.get('expectedStatusCode');\r",
							"    pm.response.to.have.status(expStatusCode);    \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "c31e0428-2fb2-4cf0-bce1-0401cc81c752",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"url": "{{baseURL}}{{GetClassRecordingsByClassIdEndpoint}}{{classId}}"
			},
			"response": []
		},
		{
			"name": "UPDATE ALL CLASSES",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "660f42f6-d0e0-43f2-8401-b57f5cdaa83b",
						"exec": [
							"var method=pm.variables.get('method');\r",
							"pm.variables.set('METHOD',method);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4a3ef84d-261d-4e50-8572-4a281a690422",
						"exec": [
							"var udpateClassSchema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated Updated Response\",\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"csId\": {\r",
							"        \"type\":  [\"number\", \"null\"]\r",
							"        },\r",
							"      \"batchId\": {\r",
							"        \"type\":  [\"number\", \"null\"]\r",
							"      },\r",
							"      \"classNo\": {\r",
							"        \"type\":  [\"number\", \"null\"]\r",
							"      },\r",
							"      \"classDate\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      },\r",
							"      \"classTopic\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      },\r",
							"      \"classStatus\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      },\r",
							"      \"classStaffId\": {\r",
							"        \"type\": [\"string\", \"null\"]\r",
							"      },\r",
							"      \"classDescription\": {\r",
							"        \"type\": [\"string\", \"null\"]\r",
							"      },\r",
							"      \"classComments\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      },\r",
							"      \"classNotes\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      },\r",
							"      \"classRecordingPath\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      },\r",
							"      \"batchName\": {\r",
							"        \"type\":  [\"string\", \"null\"]\r",
							"      },\r",
							"\t  \"classScheduledDates\":{\r",
							"\t\t  \"type\": \"array\",\r",
							"\t\t  \"items\":{\"type\":[\"string\", \"null\"]}\r",
							"\t  }\r",
							"    },\r",
							"    \"required\": [\r",
							"\t\"csId\",\r",
							"      \"batchId\",\r",
							"      \"classNo\",\r",
							"\t  \"classDate\",\r",
							"\t  \"classTopic\",\r",
							"\t  \"classStatus\",\r",
							"\t  \"classStaffId\",\r",
							"\t  \"batchName\",\r",
							"\t  \"classScheduledDates\"\r",
							"    ]\r",
							"  \r",
							"}\r",
							"\r",
							"if(pm.response.code === 200){\r",
							"    pm.test(\"udpateClassSchema Validation\",function ()\r",
							"    {\r",
							"        pm.response.to.have.jsonSchema(udpateClassSchema);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Content-Type-Validation\",function () {\r",
							"        pm.response.to.have.header('Content-Type', 'application/json');\r",
							"    });\r",
							"\r",
							"    pm.test(\"Data Type Validation -- UPDATE CLASS\", function () {\r",
							"\t\tconst class_ = pm.response.json();  // Parse the JSON response\r",
							"   \r",
							"        // Validate csId: should be a number or null\r",
							"        // pm.expect(class_).to.have.property('csId');\r",
							"        pm.expect(class_.csId).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"        // Validate batchId: should be a number or null\r",
							"        pm.expect(class_).to.have.property('batchId');\r",
							"        pm.expect(class_.batchId).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"        // Validate classNo: should be a number or null\r",
							"        pm.expect(class_).to.have.property('classNo');\r",
							"        pm.expect(class_.classNo).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"\r",
							"        // Validate classDate: should be a string or null\r",
							"        pm.expect(class_).to.have.property('classDate');\r",
							"        pm.expect(class_.classDate).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"        // Validate classTopic: should be a string or null\r",
							"        pm.expect(class_).to.have.property('classTopic');\r",
							"        pm.expect(class_.classTopic).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"        // Validate classStatus: should be a string or null\r",
							"        pm.expect(class_).to.have.property('classStatus');\r",
							"        pm.expect(class_.classStatus).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"        // Validate classStaffId: should be a string or null\r",
							"        pm.expect(class_).to.have.property('classStaffId');\r",
							"        pm.expect(class_.classStaffId).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"        // Validate batchName: should be a string or null\r",
							"        pm.expect(class_).to.have.property('batchName');\r",
							"        pm.expect(class_.batchName).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"        // Validate classRecordingPath: should be a string or null\r",
							"        //  pm.expect(class_).to.have.property('classRecordingPath');\r",
							"        pm.expect(class_.classRecordingPath).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\t\t\r",
							"\t\t// Validate that the classScheduledDates is an array\r",
							"\t\tpm.expect(class_.classScheduledDates).to.be.an('array');\r",
							"\t\t\r",
							"\t\t// Check if the array is not empty\r",
							"\t\tpm.expect(class_.classScheduledDates.length).to.be.greaterThan(0);\r",
							"\t\t\r",
							"    });\r",
							"}\r",
							"pm.test(\"StatusCodeValidation\", function () {\r",
							" const expStatusCode = pm.variables.get('expectedStatusCode');\r",
							"    pm.response.to.have.status(expStatusCode);    \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "ca92e01f-16be-40b5-814e-976ea8e54620",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"batchId\": \"{{prg2_batchId2}}\",\r\n    \"classNo\": \"{{classNo}}\",\r\n    \"classDate\": \"{{classDate}}\",\r\n    \"classTopic\": \"{{classTopic}}\",\r\n    \"classStatus\": \"{{classStatus}}\",\r\n    \"classStaffId\": \"{{classStaffId}}\",\r\n    \"classDescription\": \"{{classDescription}}\",\r\n    \"classComments\": \"{{classComments}}\",\r\n    \"classNotes\": \"{{classNotes}}\",\r\n    \"classRecordingPath\": \"{{classRecordingPath}}\",\r\n    \"batchName\": \"{{prg2_batchName2}}\",\r\n    \"classScheduledDates\": [\r\n        \"{{classScheduledDates}}\"\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}{{UpdateClassEndpoint}}{{classId2}}"
			},
			"response": []
		},
		{
			"name": "DEL_BY_PGM NAME",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "04f9646f-1d99-41a4-8383-45b0e73290e4",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5fe70927-9f9a-4c93-a43f-d3c3734d207c",
						"exec": [
							"\r",
							"pm.test(\"StatusCodeValidation\", function () {\r",
							" const expStatusCode = pm.variables.get('expectedStatusCode');\r",
							"    pm.response.to.have.status(expStatusCode);    \r",
							"});\r",
							"\r",
							"pm.test(\"Validate Response Message\", function () {   \r",
							"var program_name = pm.collectionVariables.get(\"programName2\");\r",
							"var responseMessage = pm.response.text();   \r",
							"\r",
							" if(pm.response.code === 200){     \r",
							"    var expectedMessage = ` Program Name -${program_name} is deleted Successfully!`;\r",
							"    console.log('expectedMessage ::'+expectedMessage);\r",
							" //pm.expect(responseMessage.to.include(expectedMessage));\r",
							"  // Check if one of the possible error messages is included in the response\r",
							"        var possibleMessages = [\r",
							"                        expectedMessage\r",
							"        ];\r",
							"       // Assert that one of the possible messages is in the response\r",
							"        var messageFound = possibleMessages.some(msg => responseMessage.includes(msg));       \r",
							"       pm.expect(messageFound).to.be.true;\r",
							"\r",
							" }\r",
							"\r",
							"else if(pm.response.code === 404) {           \r",
							"        var expectedMessage = `Record with program Name ${program_name} already deleted and is Inactive`;             \r",
							"\r",
							"        // Check if one of the possible error messages is included in the response\r",
							"        var possibleMessages = [\r",
							"            pm.variables.get('message'), \r",
							"             'Invalid endpoint',\r",
							"            'no record found with',\r",
							"            'Application Error',\r",
							"            expectedMessage\r",
							"        ];\r",
							"\r",
							"        // Assert that one of the possible messages is in the response\r",
							"        var messageFound = possibleMessages.some(msg => responseMessage.includes(msg));       \r",
							"       pm.expect(messageFound).to.be.true;\r",
							"    }\r",
							"\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "efaa09b0-da25-4682-8ef6-e3b45a985ade",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"url": "{{baseURL}}{{DEL_BY_PRGM_NAME_ENDPOINT}}{{programName2}}"
			},
			"response": []
		},
		{
			"name": "DEL_BY_PGM ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e3af929a-f61e-4562-975c-ad953f42c499",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "00f81305-9797-4207-aa56-b6447890b717",
						"exec": [
							"\r",
							"pm.test(\"StatusCodeValidation\", function () {\r",
							" const expStatusCode = pm.variables.get('expectedStatusCode');\r",
							"    pm.response.to.have.status(expStatusCode);    \r",
							"});\r",
							"\r",
							"pm.test(\"Validate Response Message\", function () {   \r",
							"var program_ID = pm.collectionVariables.get(\"programId1\");\r",
							"var responseMessage = pm.response.text();\r",
							"\r",
							"if(pm.response.code === 200){   \r",
							"    var expectedMessage = ` Program Id-${program_ID} is deleted Successfully!`;\r",
							"    console.log('expectedMessage ::'+expectedMessage);\r",
							" //pm.expect(responseMessage.to.includes(expectedMessage)).to.be.true;\r",
							"\r",
							" var possibleMessages = [           \r",
							"            expectedMessage\r",
							"        ];  \r",
							"        // Assert that one of the possible messages is in the response\r",
							"        var messageFound = possibleMessages.some(msg => responseMessage.includes(msg));       \r",
							"       pm.expect(messageFound).to.be.true;     \r",
							"\r",
							"}else if(pm.response.code === 404) {   \r",
							"     \r",
							"       var expectedMessage = `Record with programId ${program_ID} already deleted and is Inactive`;             \r",
							"\r",
							"        // Check if one of the possible error messages is included in the response\r",
							"        var possibleMessages = [\r",
							"            pm.variables.get('message'), \r",
							"            'no record found with',\r",
							"            'Application Error',\r",
							"            'Invalid endpoint',\r",
							"            expectedMessage\r",
							"        ];\r",
							"\r",
							"        // Assert that one of the possible messages is in the response\r",
							"        var messageFound = possibleMessages.some(msg => responseMessage.includes(msg));       \r",
							"       pm.expect(messageFound).to.be.true;\r",
							"    }\r",
							"    });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "6e04537c-d1cf-4b4a-9e6f-43096675ea15",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"url": "{{baseURL}}{{DEL_BY_PRGM_ID_ENDPOINT}}{{deleteprogramId1}}"
			},
			"response": []
		},
		{
			"name": "GET_CLS_RECORDING_BY_CLS_ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aa9de01b-a1fc-4188-a020-fdd56cdef321",
						"exec": [
							"// Attempt to parse response as JSON, but handle errors for non-JSON responses\r",
							"let responseText;\r",
							"try {\r",
							"    responseText = pm.response.json();\r",
							"} catch (e) {\r",
							"    responseText = pm.response.text();\r",
							"}\r",
							"\r",
							"// Validate the status code with expected status code from variables\r",
							"pm.test(\"Status Code Validation\", function () {\r",
							"    const expStatusCode = pm.variables.get(\"expectedStatusCode\");\r",
							"    pm.response.to.have.status(Number(expStatusCode));\r",
							"});\r",
							"\r",
							"// If the response status code is 404, handle the error message specifically\r",
							"if (pm.response.code === 404) {\r",
							"    const errorMsg = pm.response.text(); // Get the plain text response\r",
							"    console.log(\"Error message in response:\", errorMsg);\r",
							"    \r",
							"    // Check that the message is as expected\r",
							"    pm.test(\"Error message validation\", function () {\r",
							"        pm.expect(errorMsg).to.eql(\"Invalid endpoint\");\r",
							"    });\r",
							"} \r",
							"\r",
							"// Handle cases where the status code is 200\r",
							"else if (pm.response.code === 200) {\r",
							"    // 1. Code validation\r",
							"    pm.test(\"Status code is 200 or 201\", function () {\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"    });\r",
							"\r",
							"    // 2. Content-Type validation\r",
							"    pm.test(\"Content-Type is application/json\", function () {\r",
							"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"    });\r",
							"\r",
							"    // 3. Field and data type validation\r",
							"    pm.test(\"Response has all required fields\", function () {\r",
							"        pm.expect(responseText).to.have.property(\"csId\");\r",
							"        pm.expect(responseText).to.have.property(\"classRecordingPath\");\r",
							"        pm.expect(responseText.csId).to.be.a(\"number\"); \r",
							"        pm.expect(responseText.classRecordingPath).to.be.a(\"string\");\r",
							"    });\r",
							"} \r",
							"\r",
							"// If the response status code is 401, handle the error message specifically\r",
							"else if (pm.response.code === 401) {\r",
							"    console.log(\"This is for class id 0\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7da58ee3-d69f-481f-8d90-0ea23f043334",
						"exec": [
							"\r",
							"var method=pm.variables.get('method');\r",
							"pm.variables.set('METHOD',method);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "7c2db58f-21d5-45f5-a270-da94377eddf4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{token}}"
					}
				},
				"method": "{{METHOD}}",
				"header": [],
				"url": "{{baseURL}}{{getClassRecordingByClsIDdndpoint}}{{classId}}"
			},
			"response": []
		},
		{
			"name": "UPDATE_CLS_REC_PATH_FOR_CLS_ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3f7c544d-3fed-4368-b003-65623c5c7b21",
						"exec": [
							"// parse response as JSON,and handle errors for non-JSON responses as well\r",
							"let responseText;\r",
							"try {\r",
							"    responseText = pm.response.json();\r",
							"} catch (e) {\r",
							"    responseText = pm.response.text();\r",
							"}\r",
							"\r",
							"// Validate the status code with expected status code from variables\r",
							"pm.test(\"Status Code Validation\", function () {\r",
							"    const expStatusCode = pm.variables.get(\"expectedStatusCode\");\r",
							"    pm.response.to.have.status(Number(expStatusCode));\r",
							"});\r",
							"\r",
							"// If the response status code is 404, handle the error message specifically\r",
							"if (pm.response.code === 404) {\r",
							"    const errorMsg = pm.response.text(); \r",
							"    console.log(\"Error message in response:\", errorMsg);\r",
							"\r",
							"    // Check that the message is as expected or contains HTML\r",
							"    pm.test(\"Error message validation\", function () {\r",
							"        pm.expect(errorMsg).to.satisfy(msg => msg === \"Invalid endpoint\" || msg.startsWith(\"<!DOCTYPE html>\"));\r",
							"    });\r",
							"} \r",
							"\r",
							"// Handle cases where the status code is 200\r",
							"else if (pm.response.code === 200) {\r",
							"    // 1. Code validation\r",
							"    pm.test(\"Status code is 200 or 201\", function () {\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"    });\r",
							"\r",
							"    // 2. Content-Type validation\r",
							"    pm.test(\"Content-Type is application/json\", function () {\r",
							"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"    });\r",
							"\r",
							"    // 3. Field and data type validation\r",
							"    pm.test(\"Response has all required fields\", function () {\r",
							"        pm.expect(responseText).to.have.property(\"csId\");\r",
							"        pm.expect(responseText).to.have.property(\"batchId\");\r",
							"        pm.expect(responseText).to.have.property(\"classNo\");\r",
							"        pm.expect(responseText).to.have.property(\"classDate\");    \r",
							"        pm.expect(responseText).to.have.property(\"classTopic\");\r",
							"        pm.expect(responseText).to.have.property(\"classStatus\");\r",
							"        pm.expect(responseText).to.have.property(\"classStaffId\");\r",
							"        pm.expect(responseText).to.have.property(\"classDescription\");\r",
							"        pm.expect(responseText).to.have.property(\"classComments\");\r",
							"        pm.expect(responseText).to.have.property(\"classNotes\");\r",
							"        pm.expect(responseText).to.have.property(\"classRecordingPath\");\r",
							"        pm.expect(responseText).to.have.property(\"batchName\");\r",
							"        pm.expect(responseText).to.have.property(\"classScheduledDates\");\r",
							"        pm.expect(responseText.classRecordingPath).to.be.a(\"string\"); \r",
							"        pm.expect(responseText.csId).to.be.a(\"number\");\r",
							"        pm.expect(responseText.classNo).to.be.a(\"number\");\r",
							"        pm.expect(responseText.classDate).to.be.a(\"string\");  \r",
							"        pm.expect(responseText.classTopic).to.be.a(\"string\");\r",
							"        pm.expect(responseText.classStatus).to.be.a(\"string\");\r",
							"        //pm.expect(responseText.classStaffId).to.be.a(\"number\"); \r",
							"        pm.expect(responseText.classDescription).to.be.a(\"string\");\r",
							"        pm.expect(responseText.classComments).to.be.a(\"string\");\r",
							"        pm.expect(responseText.classNotes).to.be.a(\"string\");\r",
							"        pm.expect(responseText.classRecordingPath).to.be.a(\"string\");\r",
							"        pm.expect(responseText.batchName).to.be.a(\"string\"); \r",
							"    });\r",
							"\r",
							"    // 4. Schema validation\r",
							"    const schema = {\r",
							"        \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"csId\": { \"type\": \"integer\" },\r",
							"            \"batchId\": { \"type\": \"integer\" },\r",
							"            \"classNo\": { \"type\": \"integer\" },\r",
							"            \"classDate\": { \"type\": \"string\" },\r",
							"            \"classTopic\": { \"type\": \"string\" },\r",
							"            \"classStatus\": { \"type\": \"string\" },\r",
							"            \"classStaffId\": { \"type\": \"integer\" }, \r",
							"            \"classDescription\": { \"type\": \"string\" },\r",
							"            \"classComments\": { \"type\": \"string\" },\r",
							"            \"classNotes\": { \"type\": \"string\" },\r",
							"            \"classRecordingPath\": { \"type\": \"string\" },\r",
							"            \"batchName\": { \"type\": \"string\" },\r",
							"            \"classScheduledDates\": { \"type\": [\"integer\", \"null\"] } \r",
							"        },\r",
							"        \"required\": [\r",
							"            \"csId\", \"batchId\", \"classNo\", \"classDate\", \"classTopic\",\r",
							"            \"classStatus\", \"classStaffId\", \"classDescription\", \"classComments\",\r",
							"            \"classNotes\", \"classRecordingPath\", \"batchName\", \"classScheduledDates\"\r",
							"        ]\r",
							"    };\r",
							"\r",
							"    pm.test(\"Response schema is valid\", () => {\r",
							"        pm.expect(tv4.validate(responseText, schema)).to.be.true;\r",
							"    });\r",
							"} \r",
							"\r",
							"// If the response status code is 401, handle the error message specifically\r",
							"else if (pm.response.code === 401) {\r",
							"    console.log(\"This is for class id 0\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0b8328e8-d75f-4538-8776-6997dad972ba",
						"exec": [
							"var method=pm.variables.get('method');\r",
							"pm.variables.set('METHOD',method);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "7c877333-1a14-4f76-8476-e970e59d2092",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{token}}"
					}
				},
				"method": "{{METHOD}}",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"csId\":56 ,\r\n    \"classRecordingPath\": \"ttps://transcripts.gotomeeting.com/#/s/d1d1254168e0562a7eafbdebe201dacd88e2a5be33dc1db045972c7808099475_updated\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}{{updateClassRecPathEndpoint}}{{classId}}"
			},
			"response": []
		},
		{
			"name": "GET_ALL_CLS_FOR_STUDENT_ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "291662f8-3402-4db0-8cd7-17e259cf5a35",
						"exec": [
							"// Attempt to parse response as JSON, but handle errors for non-JSON responses\r",
							"let responseText;\r",
							"try {\r",
							"    responseText = pm.response.json();\r",
							"} catch (e) {\r",
							"    responseText = pm.response.text();\r",
							"}\r",
							"\r",
							"// Validate the status code with expected status code from variables\r",
							"pm.test(\"Status Code Validation\", function () {\r",
							"    const expStatusCode = pm.variables.get(\"expectedStatusCode\");\r",
							"    pm.response.to.have.status(Number(expStatusCode));\r",
							"});\r",
							"\r",
							"// If the response status code is 404, handle the error message specifically\r",
							"if (pm.response.code === 404) {\r",
							"    const errorMsg = pm.response.text(); \r",
							"    console.log(\"Error message in response:\", errorMsg);\r",
							"    \r",
							"    // Check that the message is as expected\r",
							"    pm.test(\"Error message validation\", function () {\r",
							"        pm.expect(errorMsg).to.eql(\"Invalid endpoint\");\r",
							"    });\r",
							"} \r",
							"\r",
							"// Handle cases where the status code is 200\r",
							"else if (pm.response.code === 200) \r",
							"{ \r",
							"\r",
							"  pm.test(\"Content-Type-Validation\",function () {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json');\r",
							"  });\r",
							"\r",
							"  pm.test(\"Data Type Validation -- GetAll Upcoming classes for student\", function () {\r",
							"    const result = pm.response.json();  // Parse the JSON response\r",
							"\r",
							"    // Validate that the response is an array\r",
							"    pm.expect(result).to.be.an('array');\r",
							"\r",
							"    // Check if the array is not empty\r",
							"    pm.expect(result.length).to.be.greaterThan(0);\r",
							"\r",
							"    // Iterate over each class in the response array\r",
							"    result.forEach(cls => {\r",
							"      // Validate clsId: should be a number or null\r",
							"      pm.expect(cls).to.have.property('csId');\r",
							"      pm.expect(cls.csId).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"      // Validate batchId: should be a number or null\r",
							"      pm.expect(cls).to.have.property('batchId');\r",
							"      pm.expect(cls.batchId).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"      // Validate classNo: should be a string or null\r",
							"      pm.expect(cls).to.have.property('classNo');\r",
							"      pm.expect(cls.classNo).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"      // Validate classTopic: should be a string or null\r",
							"      pm.expect(cls).to.have.property('classTopic');\r",
							"      pm.expect(cls.classTopic).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"      // Validate classStatus: should be a string or null\r",
							"      pm.expect(cls).to.have.property('classStatus');\r",
							"      pm.expect(cls.classStatus).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"      // Validate batchNoOfClasses: should be a string, number, or null\r",
							"      pm.expect(cls).to.have.property('classStaffId');\r",
							"      pm.expect(cls.classStaffId).to.satisfy(val => typeof val === 'string' || typeof val === 'number' || val === null);\r",
							"\r",
							"      // Validate classDescription: should be a number or null\r",
							"      pm.expect(cls).to.have.property('classDescription');\r",
							"      pm.expect(cls.classDescription).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"      // Validate classComments: should be a string or null\r",
							"      pm.expect(cls).to.have.property('classComments');\r",
							"      pm.expect(cls.classComments).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"      // Validate classNotes: should be a string or null\r",
							"      pm.expect(cls).to.have.property('classNotes');\r",
							"      pm.expect(cls.classNotes).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"      // Validate classRecordingPath: should be a string or null\r",
							"      pm.expect(cls).to.have.property('classRecordingPath');\r",
							"      pm.expect(cls.classRecordingPath).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"      // Validate batchName: should be a string or null\r",
							"      pm.expect(cls).to.have.property('batchName');\r",
							"      pm.expect(cls.batchName).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"    });\r",
							"  });\r",
							"\r",
							"//4. schema validation\r",
							"\r",
							"const schema ={\r",
							" \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"csId\": {\r",
							"        \"type\": \"integer\"\r",
							"      },\r",
							"      \"batchId\": {\r",
							"        \"type\": \"integer\"\r",
							"      },\r",
							"      \"classNo\": {\r",
							"        \"type\": \"integer\"\r",
							"      },\r",
							"      \"classDate\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"classTopic\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"classStatus\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"classStaffId\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"classDescription\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"classComments\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"classNotes\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"classRecordingPath\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"batchName\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"classScheduledDates\": {\r",
							"        \"type\": \"array\",\r",
							"        \"items\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"csId\",\r",
							"      \"batchId\",\r",
							"      \"classNo\",\r",
							"      \"classDate\",\r",
							"      \"classTopic\",\r",
							"      \"classStatus\",\r",
							"      \"classStaffId\",\r",
							"      \"classDescription\",\r",
							"      \"classComments\",\r",
							"      \"classNotes\",\r",
							"      \"classRecordingPath\",\r",
							"      \"batchName\",\r",
							"      \"classScheduledDates\"\r",
							"    ]\r",
							"  }\r",
							"\r",
							"};\r",
							"    pm.test(\"Response schema is valid\", () => {\r",
							"        pm.expect(tv4.validate(responseText, schema)).to.be.true;\r",
							"    });\r",
							"     \r",
							"}\r",
							"\r",
							"// If the response status code is 401\r",
							"else if (pm.response.code === 401) {\r",
							"    console.log(\"This is for student id 0\");\r",
							"}\r",
							"\t\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// If the response status code is 401, handle the error message specifically\r",
							"else if (pm.response.code === 401) {\r",
							"    console.log(\"This is for class id 0\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "84482f43-512a-4f9a-a8ae-d6daeb587cd9",
						"exec": [
							"var method=pm.variables.get('method');\r",
							"pm.variables.set('METHOD',method);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "42cd3e68-4bb2-41b6-9eaa-783e9f5ed6f7",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{token}}"
					}
				},
				"method": "{{METHOD}}",
				"header": [],
				"url": "{{baseURL}}{{GetAllClassesByStdntIdEndpoint}}{{stdntId}}"
			},
			"response": []
		},
		{
			"name": "DELETE_CLASS_BY_CLS_ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "93332757-a15c-403b-9d3d-210003994079",
						"exec": [
							"// Initialize responseText and responseJson variables\r",
							"let responseText;\r",
							"let responseJson;\r",
							"\r",
							"//  parse the response as JSON; if it fails, check for plain text\r",
							"try {\r",
							"    responseJson = pm.response.json();\r",
							"    responseText = JSON.stringify(responseJson);\r",
							"} catch (e) {\r",
							"    responseText = pm.response.text();\r",
							"}\r",
							"\r",
							"// Validate the status code with expected status code from variables\r",
							"pm.test(\"Status Code Validation\", function () {\r",
							"    const expStatusCode = pm.variables.get(\"expectedStatusCode\");\r",
							"    pm.response.to.have.status(Number(expStatusCode));\r",
							"});\r",
							"\r",
							"// Handle the specific case when the status code is 404\r",
							"if (pm.response.code === 404) {\r",
							"    const errorMsg = responseJson && responseJson.message ? responseJson.message : pm.response.text();\r",
							"    console.log(\"Error message in response:\", errorMsg);\r",
							"    \r",
							"    // Define an array of possible error messages\r",
							"    const expectedMessages = [\r",
							"        \"record not found with classId\",\r",
							"        \"Invalid endpoint\"\r",
							"    ];\r",
							"\r",
							"    // Validate that the error message matches one of the expected messages\r",
							"    pm.test(\"Error message validation for 404\", function () {\r",
							"        pm.expect(expectedMessages).to.include(errorMsg);\r",
							"    });\r",
							"} \r",
							"\r",
							"// Handle cases where the status code is 200\r",
							"else if (pm.response.code === 200) {\r",
							"    // Code validation\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"          pm.expect(pm.response.code).to.equal(200);\r",
							"    });\r",
							"\r",
							"    // Additional tests on JSON response (only if JSON parsing was successful)\r",
							"    if (responseJson) {\r",
							"        pm.test(\"Validate response is an object or array\", function () {\r",
							"            pm.expect(responseJson).to.be.an(\"object\").or.an(\"array\");\r",
							"        });\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "586db69b-94df-4530-bfed-78353e2dce58",
						"exec": [
							"var method=pm.variables.get('method');\r",
							"pm.variables.set('METHOD',method);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "7bfbfde5-b380-495f-b8c8-5799692064e5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{token}}"
					}
				},
				"method": "{{METHOD}}",
				"header": [],
				"url": "{{baseURL}}{{deleteClassByClsIdEndpoint}}{{classId}}"
			},
			"response": []
		},
		{
			"name": "DELETE_BATCH_BY_BATCHID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9b1141ae-3600-419c-b378-f1de47f0a89a",
						"exec": [
							"var method=pm.variables.get('method');\r",
							"pm.variables.set('METHOD',method);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "58dd2d0e-325f-4b62-a882-4d85246964d7",
						"exec": [
							"pm.test(\"StatusCodeValidation\", function () {\r",
							" const expStatusCode = pm.variables.get('expectedStatusCode');\r",
							"    pm.response.to.have.status(expStatusCode);    \r",
							"});\r",
							"\r",
							"pm.test(\"Validate Response Message\", function () {   \r",
							"var batchID = pm.collectionVariables.get(\"prg1_batchId2\");\r",
							"var responseMessage = pm.response.text();\r",
							"\r",
							"if(pm.response.code === 200){   \r",
							"    var expectedMessage = `Batch with Id-\r",
							"    ${prg1_batchId2} deleted Successfully! `;\r",
							"    console.log('expectedMessage ::'+expectedMessage);\r",
							" \r",
							"\r",
							" var possibleMessages = [           \r",
							"            expectedMessage\r",
							"        ];  \r",
							"        // Assert that one of the possible messages is in the response\r",
							"        var messageFound = possibleMessages.some(msg => responseMessage.includes(msg));       \r",
							"       pm.expect(messageFound).to.be.true;     \r",
							"\r",
							"}else if(pm.response.code === 404) {   \r",
							"     \r",
							"       var expectedMessage = `Record with batchid ${prg1_batchId2} already deleted and is Inactive`;             \r",
							"\r",
							"        // Check if one of the possible error messages is included in the response\r",
							"        var possibleMessages = [\r",
							"            pm.variables.get('message'), \r",
							"            'no record found with',\r",
							"            'Application Error',\r",
							"            'Invalid endpoint',\r",
							"            'Batch id not found or not exists {prg1_batchId2}',\r",
							"            expectedMessage\r",
							"        ];\r",
							"\r",
							"        // Assert that one of the possible messages is in the response\r",
							"        var messageFound = possibleMessages.some(msg => responseMessage.includes(msg));       \r",
							"       pm.expect(messageFound).to.be.true;\r",
							"    }\r",
							"    });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "c0bba8ac-e6a5-485f-8f33-ccd766301c46",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"url": "{{baseURL}}{{DELETEBatchByID_endpoint}}{{prg1_batchId2}}"
			},
			"response": []
		},
		{
			"name": "USERROLE_PRG_BATCH_MAP",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5eb07147-513b-4fe7-880b-5db241c089d1",
						"exec": [
							"var schema={\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"userId\": {\r",
							"        \"type\": [\"string\", \"null\"]\r",
							"      },\r",
							"      \"roleId\": {\r",
							"        \"type\": [\"string\", \"null\"]\r",
							"      },\r",
							"      \"programId\": {\r",
							"        \"type\": [\"number\", \"null\"]\r",
							"      },\r",
							"      \"batchId\": {\r",
							"        \"type\": [\"number\", \"null\"]\r",
							"      },\r",
							"      \"userRoleProgramBatchStatus\": {\r",
							"        \"type\": [\"string\", \"null\"]\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"userId\",\r",
							"      \"roleId\",\r",
							"      \"programId\",\r",
							"      \"batchId\",\r",
							"      \"userRoleProgramBatchStatus\"\r",
							"    ]\r",
							"  }\r",
							"}\r",
							"\r",
							"    if (pm.response.code === 200) {\r",
							"        \r",
							"        pm.test(\"Schema Validation\", function () {\r",
							"            pm.response.to.have.jsonSchema(schema); \r",
							"        });\r",
							"        \r",
							"        pm.test(\"Data Type Validation\", function () {\r",
							"            const result = pm.response.json(); \r",
							"            pm.expect(result).to.be.an('array'); \r",
							"            pm.expect(result.length).to.be.greaterThan(0); \r",
							"            \r",
							"            result.forEach(batch => {\r",
							"                \r",
							"                pm.expect(batch).to.have.property('userId');\r",
							"                pm.expect(batch.userId).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"               \r",
							"                pm.expect(batch).to.have.property('programId');\r",
							"                pm.expect(batch.programId).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"                \r",
							"                pm.expect(batch).to.have.property('roleId');\r",
							"                pm.expect(batch.roleId).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"\r",
							"                \r",
							"                pm.expect(batch).to.have.property('batchId');\r",
							"                pm.expect(batch.batchId).to.satisfy(val => typeof val === 'number' || val === null);\r",
							"\r",
							"                \r",
							"                pm.expect(batch).to.have.property('userRoleProgramBatchStatus');\r",
							"                pm.expect(batch.userRoleProgramBatchStatus).to.satisfy(val => typeof val === 'string' || val === null);\r",
							"            });\r",
							"        });\r",
							"    } \r",
							"\r",
							"\r",
							"pm.test(\"StatusCodeValidation\", function () {\r",
							" const expStatusCode = pm.variables.get('expectedStatusCode');\r",
							"    pm.response.to.have.status(expStatusCode);    \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "b1ca46a5-9e1f-436b-88e2-fb93edfc5dc1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"url": "{{baseURL}}{{allUser_Assigned_PrgBatch_endpoint}}"
			},
			"response": []
		},
		{
			"name": "DEL_ALL_PRG_BAT_BY_USER_ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e2db7d42-6aa0-40d8-9794-1437d7dcff8a",
						"exec": [
							"pm.test(\"StatusCodeValidation\", function () {\r",
							" const expStatusCode = pm.variables.get('expectedStatusCode');\r",
							"    pm.response.to.have.status(expStatusCode);    \r",
							"});\r",
							"pm.test(\"Validate Response Message\", function () {   \r",
							"var responseMessage = pm.response.text();\r",
							"\r",
							"if(pm.response.code === 200){\r",
							"const result = pm.response.json();  \r",
							"var Actualmesg=result.success;\r",
							"var expStstusmesg= pm.variables.get('ResponseMessage');\r",
							" pm.expect(Actualmesg).to.eql(expStstusmesg); \r",
							"\r",
							"}else if(pm.response.code === 404) {                    \r",
							"\r",
							"        // Check if one of the possible error messages is included in the response\r",
							"        var possibleMessages = [\r",
							"            pm.variables.get('message'), \r",
							"            'no record found with',\r",
							"            'Application Error',\r",
							"            'Invalid endpoint',\r",
							"            \r",
							"        ];\r",
							"\r",
							"        // Assert that one of the possible messages is in the response\r",
							"        var messageFound = possibleMessages.some(msg => responseMessage.includes(msg));       \r",
							"       pm.expect(messageFound).to.be.true;\r",
							"    }\r",
							"    });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "c2866a06-c778-4c8d-a10e-9d310b3fa127",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{METHOD}}",
				"header": [],
				"url": "{{baseURL}}{{Endpoint}}{{userId}}"
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{token}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b45498ce-17a8-41fc-80ac-0adec8410ac5",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Load data from json file to collection variable 'requestData'\r",
					"if(typeof pm.variables.get('requestData') !== 'object')\r",
					"{\r",
					"    pm.variables.set('requestData', pm.iterationData.toObject());\r",
					"}\r",
					"// Read input data from collection variable 'requestData'\r",
					"const requestData = pm.variables.get('requestData');\r",
					"\r",
					"// If 'requestData'/input data is empty\r",
					"if(typeof requestData != 'object' || Object.keys(requestData).length === 0)\r",
					"{\r",
					"    console.log('No external data provided/data set is empty');\r",
					"    return;\r",
					"}\r",
					"\r",
					"// Find current request's data\r",
					"const currentRequest = requestData.requests.filter(({name}) => name === pm.info.requestName)[0];\r",
					"\r",
					"// If no data found for current request\r",
					"if(!currentRequest){\r",
					"    console.log('Request ${pm.info.requestName} has no data.');\r",
					"}\r",
					"\r",
					"// If data found for current request\r",
					"if(currentRequest){\r",
					"    // Expose variables\r",
					"    const variables = currentRequest.data.shift();\r",
					"\r",
					"    Object.entries(variables).forEach(([key, value]) => {\r",
					"        pm.variables.set(key, value);\r",
					"    });\r",
					"    pm.variables.set('requestData', requestData);\r",
					"\r",
					"    // Declare next request\r",
					"    if(currentRequest.data.length > 0){\r",
					"        pm.execution.setNextRequest(pm.info.requestName);\r",
					"    }\r",
					"}\t\t"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "5ef2f930-60ab-4d79-a812-d8b0642083c5",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://lms-hackthon-oct24-3efc7e0df381.herokuapp.com/lms/",
			"type": "string"
		},
		{
			"key": "programId1",
			"value": ""
		},
		{
			"key": "programName1",
			"value": ""
		},
		{
			"key": "programId2",
			"value": ""
		},
		{
			"key": "programName2",
			"value": ""
		},
		{
			"key": "prg1_batchId1",
			"value": ""
		},
		{
			"key": "batchName",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		}
	]
}